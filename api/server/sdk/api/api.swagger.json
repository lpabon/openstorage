{
  "swagger": "2.0",
  "info": {
    "title": "api/api.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/cloudbackups": {
      "get": {
        "summary": "Return a list of backups for the specified volume",
        "operationId": "Enumerate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupEnumerateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "src_volume_id",
            "description": "Optional source id of the volume for the request.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cluster_id",
            "description": "Cluster id is an optional parameter which defines the cluster.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "credential_id",
            "description": "Credential id is the credential for cloud to be used for the request.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "all",
            "description": "All if set to true, backups for all clusters in the cloud are processed.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "OpenStorageCloudBackup"
        ]
      },
      "post": {
        "summary": "Creates a backup request for a specified volume. Use\nOpenStorageCloudBackup.Status() to get the current status of the\nbackup request.",
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupCreateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupCreateRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/backup/{backup_id}": {
      "delete": {
        "summary": "Delete deletes a backup stored in the cloud. If the backup is an incremental\nbackup and other backups are dependent on it, it will not be able to be deleted.",
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupDeleteResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "backup_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "credential_id",
            "description": "Credential id is the credential for cloud to be used for the request.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "force",
            "description": "Force Delete cloudbackup even if there are dependencies. This may be\nneeded if the backup is an incremental backup and subsequent backups\ndepend on this backup specified by `backup_id`.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/backup/{backup_id}/catalog": {
      "get": {
        "summary": "Catalog returns a list of the contents in the backup",
        "operationId": "Catalog",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupCatalogResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "backup_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "credential_id",
            "description": "Credential id describe the credentials for the cloud.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/deleteall": {
      "post": {
        "summary": "DeleteAll deletes all the backups in the cloud for the specified volume.",
        "operationId": "DeleteAll",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupDeleteAllResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupDeleteAllRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/restore": {
      "post": {
        "summary": "Restore creates a new volume from a backup id. The newly created volume\nhas an ha_level (number of replicas) of only 1. To increase the number of\nreplicas, use OpenStorageVolume.Set() to change the ha_level.",
        "operationId": "Restore",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupRestoreResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupRestoreRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/schedules": {
      "get": {
        "summary": "Enumerate cloud backup schedules",
        "operationId": "SchedEnumerate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupSchedEnumerateResponse"
            }
          }
        },
        "tags": [
          "OpenStorageCloudBackup"
        ]
      },
      "post": {
        "summary": "Create cloud backup schedule",
        "operationId": "SchedCreate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupSchedCreateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupSchedCreateRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/schedules/{backup_schedule_id}": {
      "delete": {
        "summary": "Delete cloud backup schedule",
        "operationId": "SchedDelete",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupSchedDeleteResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "backup_schedule_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/statechange": {
      "post": {
        "summary": "StateChange can be used to stop, pause, and restart a backup",
        "operationId": "StateChange",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupStateChangeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupStateChangeRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/volume/{src_volume_id}/history": {
      "get": {
        "summary": "History returns a list of backups for a specified volume",
        "operationId": "History",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupHistoryResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "src_volume_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/cloudbackups/volume/{volume_id}/status": {
      "get": {
        "summary": "Status returns the status of any cloud backups of a volume",
        "operationId": "Status",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCloudBackupStatusResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "volume_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "local",
            "description": "Local indicates if only those backups/restores that are\nactive on current node must be returned.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "OpenStorageCloudBackup"
        ]
      }
    },
    "/v1/clusters/alerts": {
      "get": {
        "summary": "AlertEnumerate returns a list of alerts from the storage cluster\nIn REST, use the request values as query parameters.",
        "operationId": "AlertEnumerate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkClusterAlertEnumerateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "time_start",
            "description": "Start time of alerts.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "time_end",
            "description": "End time of alerts.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "resource",
            "description": "Type of resource.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "RESOURCE_TYPE_NONE",
              "RESOURCE_TYPE_VOLUME",
              "RESOURCE_TYPE_NODE",
              "RESOURCE_TYPE_CLUSTER",
              "RESOURCE_TYPE_DRIVE"
            ],
            "default": "RESOURCE_TYPE_NONE"
          }
        ],
        "tags": [
          "OpenStorageCluster"
        ]
      }
    },
    "/v1/clusters/alerts/clear": {
      "post": {
        "summary": "AlertClear clears the alert for a given resource",
        "operationId": "AlertClear",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkClusterAlertClearResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkClusterAlertClearRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageCluster"
        ]
      }
    },
    "/v1/clusters/alerts/{alert_id}": {
      "delete": {
        "summary": "AlertDelete deletes an alert for all resources",
        "operationId": "AlertDelete",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkClusterAlertDeleteResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "alert_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "resource",
            "description": "Type of resource (required).",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "RESOURCE_TYPE_NONE",
              "RESOURCE_TYPE_VOLUME",
              "RESOURCE_TYPE_NODE",
              "RESOURCE_TYPE_CLUSTER",
              "RESOURCE_TYPE_DRIVE"
            ],
            "default": "RESOURCE_TYPE_NONE"
          }
        ],
        "tags": [
          "OpenStorageCluster"
        ]
      }
    },
    "/v1/clusters/current": {
      "get": {
        "summary": "InspectCurrent returns information about the current cluster",
        "operationId": "InspectCurrent",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkClusterInspectCurrentResponse"
            }
          }
        },
        "tags": [
          "OpenStorageCluster"
        ]
      }
    },
    "/v1/credentials": {
      "get": {
        "summary": "Enumerate returns a list of credential ids",
        "operationId": "Enumerate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCredentialEnumerateResponse"
            }
          }
        },
        "tags": [
          "OpenStorageCredentials"
        ]
      },
      "post": {
        "summary": "Create is used to submit cloud credentials. It will return an\nid of the credentials once they are verified to work.",
        "description": "##### Example\n{% codetabs name=\"Golang\", type=\"go\" -%}\nid, err := client.Create(context.Background(), \u0026api.SdkCredentialCreateRequest{\n    CredentialType: \u0026api.SdkCredentialCreateRequest_AwsCredential{\n      AwsCredential: \u0026api.SdkAwsCredentialRequest{\n      AccessKey: \"dummy-access\",\n      SecretKey: \"dummy-secret\",\n      Endpoint:  \"dummy-endpoint\",\n      Region:    \"dummy-region\",\n    },\n  },\n})\n{%- language name=\"Python\", type=\"py\" -%}\nen_resp = client.Create(api_pb2.SdkCredentialCreateRequest(\n  aws_credential=api_pb2.SdkAwsCredentialRequest(\n    access_key='dummy-access',\n    secret_key='dumm-secret',\n    endpoint='dummy-endpoint',\n    region='dummy-region')))\n{%- endcodetabs %}",
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCredentialCreateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkCredentialCreateRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageCredentials"
        ]
      }
    },
    "/v1/credentials/{credential_id}": {
      "get": {
        "summary": "Inspect returns the information about a credential, but does not return the secret key.",
        "operationId": "Inspect",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCredentialInspectResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "credential_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenStorageCredentials"
        ]
      },
      "delete": {
        "summary": "Delete a specified credential",
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCredentialDeleteResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "credential_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenStorageCredentials"
        ]
      }
    },
    "/v1/credentials/{credential_id}/validate": {
      "get": {
        "summary": "Validate is used to validate credentials",
        "operationId": "Validate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkCredentialValidateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "credential_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenStorageCredentials"
        ]
      }
    },
    "/v1/nodes": {
      "get": {
        "summary": "Enumerate returns the ids of all the nodes in the current cluster",
        "operationId": "Enumerate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkNodeEnumerateResponse"
            }
          }
        },
        "tags": [
          "OpenStorageNode"
        ]
      }
    },
    "/v1/nodes/current": {
      "get": {
        "summary": "InspectCurrent returns information about the storage node\nwhere the client is currently connected to.",
        "operationId": "InspectCurrent",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkNodeInspectCurrentResponse"
            }
          }
        },
        "tags": [
          "OpenStorageNode"
        ]
      }
    },
    "/v1/nodes/node/{node_id}": {
      "get": {
        "summary": "Inspect returns information about the specified node",
        "operationId": "Inspect",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkNodeInspectResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenStorageNode"
        ]
      }
    },
    "/v1/objectstores": {
      "post": {
        "summary": "Creates creates an object store endpoint on specified volume",
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkObjectstoreCreateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkObjectstoreCreateRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageObjectstore"
        ]
      },
      "put": {
        "summary": "Updates provided objectstore status.\nThis call can be used to stop and start the server while maintaining the same\nobject storage id.",
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkObjectstoreUpdateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkObjectstoreUpdateRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageObjectstore"
        ]
      }
    },
    "/v1/objectstores/{objectstore_id}": {
      "get": {
        "summary": "Inspect returns information about the object store endpoint",
        "operationId": "Inspect",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkObjectstoreInspectResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "objectstore_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenStorageObjectstore"
        ]
      },
      "delete": {
        "summary": "Delete destroys the object store endpoint on the volume",
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkObjectstoreDeleteResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "objectstore_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenStorageObjectstore"
        ]
      }
    },
    "/v1/schedulepolicies": {
      "get": {
        "summary": "Enumerate returns a list of schedules",
        "operationId": "Enumerate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkSchedulePolicyEnumerateResponse"
            }
          }
        },
        "tags": [
          "OpenStorageSchedulePolicy"
        ]
      },
      "post": {
        "summary": "Create creates a new snapshot schedule. They can be setup daily,\nweekly, or monthly.",
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkSchedulePolicyCreateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkSchedulePolicyCreateRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageSchedulePolicy"
        ]
      },
      "put": {
        "summary": "Update a snapshot schedule",
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkSchedulePolicyUpdateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkSchedulePolicyUpdateRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageSchedulePolicy"
        ]
      }
    },
    "/v1/schedulepolicies/{name}": {
      "get": {
        "summary": "Inspect returns information about a specified schedule",
        "operationId": "Inspect",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkSchedulePolicyInspectResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenStorageSchedulePolicy"
        ]
      },
      "delete": {
        "summary": "Delete removes a snapshot schedule",
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkSchedulePolicyDeleteResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenStorageSchedulePolicy"
        ]
      }
    },
    "/v1/volumes": {
      "post": {
        "summary": "Create creates a volume according to the specification provided",
        "description": "##### Example\n{% codetabs name=\"Golang\", type=\"go\" -%}\nid, err := client.Create(context.Background(), \u0026api.SdkVolumeCreateRequest{\n  Name: \"volume-12345-east\",\n  Spec: \u0026api.VolumeSpec {\n    Size: 1234567,\n  },\n})\n{%- language name=\"Python\", type=\"py\" -%}\nen_resp = client.Create(api_pb2.SdkVolumeCreateRequest(\n  name=\"volume-12345-east\",\n  spec=api_pb2.VolumeSpec(size=1234567)))\n{%- endcodetabs %}",
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeCreateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeCreateRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageVolume"
        ]
      },
      "put": {
        "summary": "Update provides a method for manipulating the specification and attributes of a volume.\nSet can be used to resize a volume, update labels, change replica count, and much more.",
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeUpdateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeUpdateRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/attach": {
      "post": {
        "summary": "Attach attaches device to the host that the client is communicating with.\nNOTE: Please see [#381](https://github.com/libopenstorage/openstorage/issues/381) for more\ninformation about a new feature to allow attachment to any node.",
        "operationId": "Attach",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeAttachResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeAttachRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/clone": {
      "post": {
        "summary": "Clone creates a new writable volume cloned from an existing volume",
        "operationId": "Clone",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeCloneResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeCloneRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/detach": {
      "post": {
        "summary": "Detaches a the volume from the host",
        "operationId": "Detach",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeDetachResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeDetachRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/enumerate": {
      "post": {
        "summary": "Enumerate returns a list of volume ids that match the labels if any are provided.",
        "operationId": "Enumerate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeEnumerateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeEnumerateRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/mount": {
      "post": {
        "summary": "Mount mounts an attached volume in the host that the client is communicating with\nNOTE: Please see [#381](https://github.com/libopenstorage/openstorage/issues/381) for more\ninformation about a new feature to allow attachment to any node.",
        "operationId": "Mount",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeMountResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeMountRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/snapshots": {
      "post": {
        "summary": "SnapshotCreate creates a snapshot of a volume. This creates an immutable (read-only),\npoint-in-time snapshot of a volume. To create a new writable volume from\na snapshot, please use OpenStorageVolume.Clone().",
        "operationId": "SnapshotCreate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotCreateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotCreateRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/snapshots/enumerate": {
      "post": {
        "summary": "SnapshotEnumerate returns a list of snapshots for a specific volume\nthat match the labels provided if any.",
        "operationId": "SnapshotEnumerate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotEnumerateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotEnumerateRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/snapshots/restore": {
      "post": {
        "summary": "SnapshotRestore restores a volume to a specified snapshot",
        "operationId": "SnapshotRestore",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotRestoreResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeSnapshotRestoreRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/unmount": {
      "post": {
        "summary": "Unmount unmounts a mounted volume in the host that the client is communicating with\nNOTE: Please see [#381](https://github.com/libopenstorage/openstorage/issues/381) for more\ninformation about a new feature to allow attachment to any node.",
        "operationId": "Unmount",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeUnmountResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeUnmountRequest"
            }
          }
        ],
        "tags": [
          "OpenStorageVolume"
        ]
      }
    },
    "/v1/volumes/{volume_id}": {
      "get": {
        "summary": "Inspect returns information about a volume",
        "operationId": "Inspect",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeInspectResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "volume_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenStorageVolume"
        ]
      },
      "delete": {
        "summary": "Delete deletes the provided volume",
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiSdkVolumeDeleteResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "volume_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OpenStorageVolume"
        ]
      }
    }
  },
  "definitions": {
    "apiAlert": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Id for Alert"
        },
        "severity": {
          "$ref": "#/definitions/apiSeverityType",
          "title": "Severity of the Alert"
        },
        "alert_type": {
          "type": "string",
          "format": "int64",
          "title": "AlertType user defined alert type"
        },
        "message": {
          "type": "string",
          "title": "Message describing the Alert"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "title": "Timestamp when Alert occured"
        },
        "resource_id": {
          "type": "string",
          "title": "ResourceId where Alert occured"
        },
        "resource": {
          "$ref": "#/definitions/apiResourceType",
          "title": "Resource where Alert occured"
        },
        "cleared": {
          "type": "boolean",
          "format": "boolean",
          "title": "Cleared Flag"
        },
        "ttl": {
          "type": "string",
          "format": "uint64",
          "title": "Time-to-live in seconds for this Alert"
        },
        "unique_tag": {
          "type": "string",
          "title": "UniqueTag helps identify a unique alert for a given resouce"
        },
        "count": {
          "type": "string",
          "format": "int64",
          "description": "Count of such alerts raised so far."
        },
        "first_seen": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when such alert was raised the very first time."
        }
      },
      "title": "Alert is a structure that represents an alert object\nswagger:model"
    },
    "apiAttachState": {
      "type": "string",
      "enum": [
        "ATTACH_STATE_EXTERNAL",
        "ATTACH_STATE_INTERNAL",
        "ATTACH_STATE_INTERNAL_SWITCH"
      ],
      "default": "ATTACH_STATE_EXTERNAL",
      "title": "- ATTACH_STATE_EXTERNAL: Attached and available externally\n - ATTACH_STATE_INTERNAL: Attached but only available internally\n - ATTACH_STATE_INTERNAL_SWITCH: Switching from External to Internal"
    },
    "apiCosType": {
      "type": "string",
      "enum": [
        "NONE",
        "LOW",
        "MEDIUM",
        "HIGH"
      ],
      "default": "NONE"
    },
    "apiFSType": {
      "type": "string",
      "enum": [
        "FS_TYPE_NONE",
        "FS_TYPE_BTRFS",
        "FS_TYPE_EXT4",
        "FS_TYPE_FUSE",
        "FS_TYPE_NFS",
        "FS_TYPE_VFS",
        "FS_TYPE_XFS",
        "FS_TYPE_ZFS"
      ],
      "default": "FS_TYPE_NONE"
    },
    "apiGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id common identifier across volumes that have the same group."
        }
      },
      "title": "Group represents VolumeGroup / namespace\nAll volumes in the same group share this object.\nswagger:model"
    },
    "apiIoProfile": {
      "type": "string",
      "enum": [
        "IO_PROFILE_SEQUENTIAL",
        "IO_PROFILE_RANDOM",
        "IO_PROFILE_DB",
        "IO_PROFILE_DB_REMOTE",
        "IO_PROFILE_CMS"
      ],
      "default": "IO_PROFILE_SEQUENTIAL"
    },
    "apiObjectstoreInfo": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "title": "UUID of objectstore"
        },
        "volume_id": {
          "type": "string",
          "title": "VolumeID of volume used by object store"
        },
        "enabled": {
          "type": "boolean",
          "format": "boolean",
          "title": "Enable/Disable created objectstore"
        },
        "status": {
          "type": "string",
          "title": "Status of objectstore running/failed"
        },
        "action": {
          "type": "string",
          "format": "int64",
          "title": "Action being taken on this objectstore"
        },
        "access_key": {
          "type": "string",
          "title": "AccessKey for login into objectstore"
        },
        "secret_key": {
          "type": "string",
          "title": "SecretKey for login into objectstore"
        },
        "endpoints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Endpoints for accessing objectstore"
        },
        "current_endpoint": {
          "type": "string",
          "title": "CurrentEndpoint on which objectstore server is accessible"
        },
        "access_port": {
          "type": "string",
          "format": "int64",
          "title": "AccessPort is objectstore server port"
        },
        "region": {
          "type": "string",
          "title": "Region for this objectstore"
        }
      },
      "title": "ObjectstoreInfo is a structure that has current objectstore info\nswagger:model"
    },
    "apiReplicaSet": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ReplicaSet set of machine IDs (nodes) to which part of this volume is erasure\ncoded - for clustered storage arrays\nswagger:model"
    },
    "apiResourceType": {
      "type": "string",
      "enum": [
        "RESOURCE_TYPE_NONE",
        "RESOURCE_TYPE_VOLUME",
        "RESOURCE_TYPE_NODE",
        "RESOURCE_TYPE_CLUSTER",
        "RESOURCE_TYPE_DRIVE"
      ],
      "default": "RESOURCE_TYPE_NONE"
    },
    "apiRuntimeStateMap": {
      "type": "object",
      "properties": {
        "runtime_state": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "RuntimeStateMap is a list of name value mapping of driver specific runtime\ninformation.\nswagger:model"
    },
    "apiSdkAwsCredentialRequest": {
      "type": "object",
      "properties": {
        "access_key": {
          "type": "string",
          "title": "Access key"
        },
        "secret_key": {
          "type": "string",
          "title": "Secret key"
        },
        "endpoint": {
          "type": "string",
          "title": "Endpoint"
        },
        "region": {
          "type": "string",
          "title": "Region"
        }
      },
      "title": "Defines credentials for Aws/S3 endpoints"
    },
    "apiSdkAwsCredentialResponse": {
      "type": "object",
      "properties": {
        "credential_id": {
          "type": "string",
          "title": "Credential Id"
        },
        "access_key": {
          "type": "string",
          "title": "Access key"
        },
        "endpoint": {
          "type": "string",
          "title": "Endpoint"
        },
        "region": {
          "type": "string",
          "title": "Region"
        }
      },
      "title": "Defines the response for AWS/S3 credentials"
    },
    "apiSdkAzureCredentialRequest": {
      "type": "object",
      "properties": {
        "account_name": {
          "type": "string",
          "title": "Account name"
        },
        "account_key": {
          "type": "string",
          "title": "Account key"
        }
      },
      "title": "Defines credentials for Azure"
    },
    "apiSdkAzureCredentialResponse": {
      "type": "object",
      "properties": {
        "credential_id": {
          "type": "string",
          "title": "Credential Id"
        },
        "account_name": {
          "type": "string",
          "title": "Account name"
        }
      },
      "title": "Defines the response for Azure credentials"
    },
    "apiSdkCloudBackupCatalogResponse": {
      "type": "object",
      "properties": {
        "contents": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Contents is listing of backup contents"
        }
      },
      "title": "Defines a response containing the contents of a backup stored by a cloud provider"
    },
    "apiSdkCloudBackupCreateRequest": {
      "type": "object",
      "properties": {
        "volume_id": {
          "type": "string",
          "title": "VolumeID of the volume for which cloudbackup is requested"
        },
        "credential_id": {
          "type": "string",
          "title": "Credential id refers to the cloud credentials needed to backup"
        },
        "full": {
          "type": "boolean",
          "format": "boolean",
          "title": "Full indicates if full backup is desired even though incremental is possible"
        }
      },
      "title": "Defines a request to create a backup of a volume to the cloud"
    },
    "apiSdkCloudBackupCreateResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkCloudBackupDeleteAllRequest": {
      "type": "object",
      "properties": {
        "src_volume_id": {
          "type": "string",
          "title": "id of the volume for the request"
        },
        "credential_id": {
          "type": "string",
          "title": "Credential id is the credential for cloud to be used for the request"
        }
      },
      "title": "Defines a request to delete all the backups stored by a cloud provider\nfor a specified volume"
    },
    "apiSdkCloudBackupDeleteAllResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkCloudBackupDeleteResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkCloudBackupEnumerateResponse": {
      "type": "object",
      "properties": {
        "backups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiSdkCloudBackupInfo"
          }
        }
      },
      "title": "Defines a response which lists all the backups stored by a cloud provider"
    },
    "apiSdkCloudBackupHistoryItem": {
      "type": "object",
      "properties": {
        "src_volume_id": {
          "type": "string",
          "title": "SrcVolumeID is volume ID which was backedup"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "title": "TimeStamp is the time at which either backup completed/failed"
        },
        "status": {
          "$ref": "#/definitions/apiSdkCloudBackupStatusType",
          "title": "Status indicates whether backup was completed/failed"
        }
      },
      "title": "SdkCloudBackupHistoryItem contains information about a backup for a\nspecific volume"
    },
    "apiSdkCloudBackupHistoryResponse": {
      "type": "object",
      "properties": {
        "history_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiSdkCloudBackupHistoryItem"
          },
          "title": "HistoryList is list of past backups on this volume"
        }
      },
      "title": "Defines a response containing a list of history of backups to a cloud provider"
    },
    "apiSdkCloudBackupInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "This is the id as represented by the cloud provider"
        },
        "src_volume_id": {
          "type": "string",
          "title": "Source volumeID of the backup"
        },
        "src_volume_name": {
          "type": "string",
          "title": "Name of the sourceVolume of the backup"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "title": "Timestamp is the timestamp at which the source volume\nwas backed up to cloud"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Metadata associated with the backup"
        },
        "status": {
          "$ref": "#/definitions/apiSdkCloudBackupStatusType",
          "title": "Status indicates the status of the backup"
        }
      },
      "title": "SdkCloudBackupInfo has information about a backup stored by a cloud provider"
    },
    "apiSdkCloudBackupOpType": {
      "type": "string",
      "enum": [
        "SdkCloudBackupOpTypeUnknown",
        "SdkCloudBackupOpTypeBackupOp",
        "SdkCloudBackupOpTypeRestoreOp"
      ],
      "default": "SdkCloudBackupOpTypeUnknown",
      "description": "- SdkCloudBackupOpTypeUnknown: Unknown\n - SdkCloudBackupOpTypeBackupOp: Backup\n - SdkCloudBackupOpTypeRestoreOp: Restore",
      "title": "CloudBackup operations types"
    },
    "apiSdkCloudBackupRequestedState": {
      "type": "string",
      "enum": [
        "SdkCloudBackupRequestedStateUnknown",
        "SdkCloudBackupRequestedStatePause",
        "SdkCloudBackupRequestedStateResume",
        "SdkCloudBackupRequestedStateStop"
      ],
      "default": "SdkCloudBackupRequestedStateUnknown",
      "description": "- SdkCloudBackupRequestedStateUnknown: Unknown state\n - SdkCloudBackupRequestedStatePause: Pause the backup or restore\n - SdkCloudBackupRequestedStateResume: Resume the backup or restore\n - SdkCloudBackupRequestedStateStop: Stop a backup or restore",
      "title": "SdkCloudBackupRequestedState defines states to set a specified backup or restore\nto or from a cloud provider"
    },
    "apiSdkCloudBackupRestoreRequest": {
      "type": "object",
      "properties": {
        "backup_id": {
          "type": "string",
          "title": "Backup ID being restored"
        },
        "restore_volume_name": {
          "type": "string",
          "title": "Optional volume Name of the new volume to be created\nin the cluster for restoring the cloudbackup"
        },
        "credential_id": {
          "type": "string",
          "title": "The credential to be used for restore operation"
        },
        "node_id": {
          "type": "string",
          "title": "Optional for provisioning restore\nvolume (ResoreVolumeName should not be specified)"
        }
      },
      "title": "Defines a request to restore a volume from an existing backup stored by\na cloud provider"
    },
    "apiSdkCloudBackupRestoreResponse": {
      "type": "object",
      "properties": {
        "restore_volume_id": {
          "type": "string",
          "title": "VolumeID to which the backup is being restored"
        }
      },
      "title": "Defines a response when restoring a volume from a backup stored by\na cloud provider"
    },
    "apiSdkCloudBackupSchedCreateRequest": {
      "type": "object",
      "properties": {
        "cloud_sched_info": {
          "$ref": "#/definitions/apiSdkCloudBackupScheduleInfo",
          "title": "Cloud Backup Schedule info"
        }
      },
      "title": "Defines a request to create a schedule for volume backups to a\ncloud provider"
    },
    "apiSdkCloudBackupSchedCreateResponse": {
      "type": "object",
      "properties": {
        "backup_schedule_id": {
          "type": "string",
          "title": "Id of newly created backup schedule"
        }
      },
      "title": "Defines a response containing the id of a schedule for a volume backup\nto a cloud provider"
    },
    "apiSdkCloudBackupSchedDeleteResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkCloudBackupSchedEnumerateResponse": {
      "type": "object",
      "properties": {
        "cloud_sched_list": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apiSdkCloudBackupScheduleInfo"
          },
          "title": "Returns list of backup schedules"
        }
      },
      "title": "Defines a response containing a map listing the schedules for volume\nbackups to a cloud provider"
    },
    "apiSdkCloudBackupScheduleInfo": {
      "type": "object",
      "properties": {
        "src_volume_id": {
          "type": "string",
          "title": "The schedule's source volume"
        },
        "credential_id": {
          "type": "string",
          "title": "The cloud credential used with this schedule"
        },
        "schedule": {
          "$ref": "#/definitions/apiSdkSchedulePolicyInterval",
          "title": "Schedule is the frequence of backup"
        },
        "max_backups": {
          "type": "string",
          "format": "uint64",
          "title": "MaxBackups are the maximum number of backups retained\nin cloud.Older backups are deleted"
        }
      },
      "title": "SdkCloudBackupScheduleInfo describes a schedule for volume backups to\na cloud provider"
    },
    "apiSdkCloudBackupStateChangeRequest": {
      "type": "object",
      "properties": {
        "src_volume_id": {
          "type": "string",
          "title": "Describes the volume id on which backup/restore\nstate change is being requested"
        },
        "requested_state": {
          "$ref": "#/definitions/apiSdkCloudBackupRequestedState",
          "title": "The desired state of the operation"
        }
      },
      "title": "Defines a request to change the state of a backup or restore to or\nfrom a cloud provider"
    },
    "apiSdkCloudBackupStateChangeResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkCloudBackupStatus": {
      "type": "object",
      "properties": {
        "backup_id": {
          "type": "string",
          "title": "This is the id as represented by the cloud provider"
        },
        "optype": {
          "$ref": "#/definitions/apiSdkCloudBackupOpType",
          "title": "OpType indicates if this is a backup or restore"
        },
        "status": {
          "$ref": "#/definitions/apiSdkCloudBackupStatusType",
          "title": "State indicates if the op is currently active/done/failed"
        },
        "bytes_done": {
          "type": "string",
          "format": "uint64",
          "title": "BytesDone indicates total Bytes uploaded/downloaded"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "title": "StartTime indicates Op's start time"
        },
        "completed_time": {
          "type": "string",
          "format": "date-time",
          "title": "CompletedTime indicates Op's completed time"
        },
        "node_id": {
          "type": "string",
          "title": "NodeID is the ID of the node where this Op is active"
        }
      },
      "title": "SdkCloudBackupStatus defines the status of a backup stored by a cloud provider"
    },
    "apiSdkCloudBackupStatusResponse": {
      "type": "object",
      "properties": {
        "statuses": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apiSdkCloudBackupStatus"
          },
          "title": "Statuses is list of currently active/failed/done backup/restores where\nthe key is the volume ids of current volumes being backed up or restored"
        }
      },
      "title": "Defines a response containing the status of the backups for a specified volume"
    },
    "apiSdkCloudBackupStatusType": {
      "type": "string",
      "enum": [
        "SdkCloudBackupStatusTypeUnknown",
        "SdkCloudBackupStatusTypeNotStarted",
        "SdkCloudBackupStatusTypeDone",
        "SdkCloudBackupStatusTypeAborted",
        "SdkCloudBackupStatusTypePaused",
        "SdkCloudBackupStatusTypeStopped",
        "SdkCloudBackupStatusTypeActive",
        "SdkCloudBackupStatusTypeFailed"
      ],
      "default": "SdkCloudBackupStatusTypeUnknown",
      "description": "- SdkCloudBackupStatusTypeUnknown: Unkonwn\n - SdkCloudBackupStatusTypeNotStarted: Not started\n - SdkCloudBackupStatusTypeDone: Done\n - SdkCloudBackupStatusTypeAborted: Aborted\n - SdkCloudBackupStatusTypePaused: Paused\n - SdkCloudBackupStatusTypeStopped: Stopped\n - SdkCloudBackupStatusTypeActive: Active\n - SdkCloudBackupStatusTypeFailed: Failed",
      "title": "CloudBackup status types"
    },
    "apiSdkClusterAlertClearRequest": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/apiResourceType",
          "title": "Type of resource (required)"
        },
        "alert_id": {
          "type": "string",
          "format": "int64",
          "title": "Id of alert as returned by ClusterEnumerateAlertResponse (required)"
        }
      },
      "title": "Defines a request to clear an alert"
    },
    "apiSdkClusterAlertClearResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkClusterAlertDeleteResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkClusterAlertEnumerateResponse": {
      "type": "object",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAlert"
          },
          "title": "Information on the alerts requested"
        }
      },
      "title": "Defines a response providing a list of alerts"
    },
    "apiSdkClusterInspectCurrentResponse": {
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/apiStorageCluster",
          "title": "Cluster information"
        }
      },
      "title": "Defines a response when inspecting the current cluster"
    },
    "apiSdkCredentialCreateRequest": {
      "type": "object",
      "properties": {
        "aws_credential": {
          "$ref": "#/definitions/apiSdkAwsCredentialRequest",
          "title": "Credentials for AWS/S3"
        },
        "azure_credential": {
          "$ref": "#/definitions/apiSdkAzureCredentialRequest",
          "title": "Credentials for Azure"
        },
        "google_credential": {
          "$ref": "#/definitions/apiSdkGoogleCredentialRequest",
          "title": "Credentials for Google"
        }
      },
      "title": "Defines a request to create credentials"
    },
    "apiSdkCredentialCreateResponse": {
      "type": "object",
      "properties": {
        "credential_id": {
          "type": "string",
          "title": "Id of the credentials"
        }
      },
      "title": "Defines a response from creating a credential"
    },
    "apiSdkCredentialDeleteResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkCredentialEnumerateResponse": {
      "type": "object",
      "properties": {
        "credential_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of credentials"
        }
      },
      "title": "Defines response for a enumeration of credentials"
    },
    "apiSdkCredentialInspectResponse": {
      "type": "object",
      "properties": {
        "aws_credential": {
          "$ref": "#/definitions/apiSdkAwsCredentialResponse",
          "title": "Aws credentials"
        },
        "azure_credential": {
          "$ref": "#/definitions/apiSdkAzureCredentialResponse",
          "title": "Azure credentials"
        },
        "google_credential": {
          "$ref": "#/definitions/apiSdkGoogleCredentialResponse",
          "title": "Google credentials"
        }
      },
      "description": "Defines the response to an inspection of a credential.\nThis response uses OneOf proto style. Depending on your programming language\nyou will need to check if the value of credential_type is one of the ones below."
    },
    "apiSdkCredentialValidateResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkGoogleCredentialRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string",
          "title": "Project ID"
        },
        "json_key": {
          "type": "string",
          "title": "JSON Key"
        }
      },
      "title": "Defines credentials for Google"
    },
    "apiSdkGoogleCredentialResponse": {
      "type": "object",
      "properties": {
        "credential_id": {
          "type": "string",
          "title": "Credential Id"
        },
        "project_id": {
          "type": "string",
          "title": "Project ID"
        }
      },
      "title": "Defines the response for Google credentials"
    },
    "apiSdkNodeEnumerateResponse": {
      "type": "object",
      "properties": {
        "node_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of all the node ids in the cluster"
        }
      },
      "title": "Defines a response with a list of nodes"
    },
    "apiSdkNodeInspectCurrentResponse": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/apiStorageNode",
          "title": "Node information"
        }
      },
      "title": "Defines a response when inspecting a node"
    },
    "apiSdkNodeInspectResponse": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/apiStorageNode",
          "title": "Node information"
        }
      },
      "title": "Defines a response when inspecting a node"
    },
    "apiSdkObjectstoreCreateRequest": {
      "type": "object",
      "properties": {
        "volume_id": {
          "type": "string",
          "title": "Volume on which objectstore will be running"
        }
      },
      "title": "Defines a request to create an object store"
    },
    "apiSdkObjectstoreCreateResponse": {
      "type": "object",
      "properties": {
        "objectstore_status": {
          "$ref": "#/definitions/apiObjectstoreInfo",
          "title": "Created objecstore status"
        }
      },
      "title": "Defines a response when an object store has been created for a\nspecified volume"
    },
    "apiSdkObjectstoreDeleteResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkObjectstoreInspectResponse": {
      "type": "object",
      "properties": {
        "objectstore_status": {
          "$ref": "#/definitions/apiObjectstoreInfo",
          "title": "Contains information about the object store requested"
        }
      },
      "title": "Defines a response when inspecting an object store endpoint"
    },
    "apiSdkObjectstoreUpdateRequest": {
      "type": "object",
      "properties": {
        "objectstore_id": {
          "type": "string",
          "title": "Objectstore Id to update"
        },
        "enable": {
          "type": "boolean",
          "format": "boolean",
          "title": "enable/disable objectstore"
        }
      },
      "title": "Defines a request to update an object store"
    },
    "apiSdkObjectstoreUpdateResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkSchedulePolicy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the schedule policy"
        },
        "schedule": {
          "$ref": "#/definitions/apiSdkSchedulePolicyInterval",
          "title": "Schedule policy"
        }
      },
      "title": "Defines a schedule policy"
    },
    "apiSdkSchedulePolicyCreateRequest": {
      "type": "object",
      "properties": {
        "SchedulePolicy": {
          "$ref": "#/definitions/apiSdkSchedulePolicy",
          "title": "Schedule Policy"
        }
      },
      "title": "Define a schedule policy request"
    },
    "apiSdkSchedulePolicyCreateResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkSchedulePolicyDeleteResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkSchedulePolicyEnumerateResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiSdkSchedulePolicy"
          },
          "title": "List of Schedule Policy"
        }
      },
      "title": "Defines a schedule policy enumerate response"
    },
    "apiSdkSchedulePolicyInspectResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/apiSdkSchedulePolicy",
          "title": "List of Schedule Policy"
        }
      },
      "title": "Defines a schedule policy inspection response"
    },
    "apiSdkSchedulePolicyInterval": {
      "type": "object",
      "properties": {
        "retain": {
          "type": "string",
          "format": "int64",
          "title": "Number of instances to retain"
        },
        "daily": {
          "$ref": "#/definitions/apiSdkSchedulePolicyIntervalDaily",
          "title": "Daily policy"
        },
        "weekly": {
          "$ref": "#/definitions/apiSdkSchedulePolicyIntervalWeekly",
          "title": "Weekly policy"
        },
        "monthly": {
          "$ref": "#/definitions/apiSdkSchedulePolicyIntervalMonthly",
          "title": "Monthly policy"
        }
      },
      "title": "Defines a schedule policy interval"
    },
    "apiSdkSchedulePolicyIntervalDaily": {
      "type": "object",
      "properties": {
        "hour": {
          "type": "integer",
          "format": "int32",
          "title": "Range: 0-23"
        },
        "minute": {
          "type": "integer",
          "format": "int32",
          "title": "Range: 0-59"
        }
      },
      "title": "Defines a daily schedule"
    },
    "apiSdkSchedulePolicyIntervalMonthly": {
      "type": "object",
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32",
          "title": "Range: 1-28"
        },
        "hour": {
          "type": "integer",
          "format": "int32",
          "title": "Range: 0-59"
        },
        "minute": {
          "type": "integer",
          "format": "int32",
          "title": "Range: 0-59"
        }
      },
      "title": "Defines a monthly schedule"
    },
    "apiSdkSchedulePolicyIntervalWeekly": {
      "type": "object",
      "properties": {
        "day": {
          "$ref": "#/definitions/apiSdkTimeWeekday"
        },
        "hour": {
          "type": "integer",
          "format": "int32",
          "title": "Range: 0-23"
        },
        "minute": {
          "type": "integer",
          "format": "int32",
          "title": "Range: 0-59"
        }
      },
      "title": "Defines a weekly schedule"
    },
    "apiSdkSchedulePolicyUpdateRequest": {
      "type": "object",
      "properties": {
        "SchedulePolicy": {
          "$ref": "#/definitions/apiSdkSchedulePolicy",
          "title": "Schedule Policy"
        }
      },
      "title": "Define a request to update a schedule policy"
    },
    "apiSdkSchedulePolicyUpdateResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkTimeWeekday": {
      "type": "string",
      "enum": [
        "SdkTimeWeekdaySunday",
        "SdkTimeWeekdayMonday",
        "SdkTimeWeekdayTuesday",
        "SdkTimeWeekdayWednesday",
        "SdkTimeWeekdayThursday",
        "SdkTimeWeekdayFriday",
        "SdkTimeWeekdaySaturday"
      ],
      "default": "SdkTimeWeekdaySunday",
      "description": "- SdkTimeWeekdaySunday: Sunday\n - SdkTimeWeekdayMonday: Monday\n - SdkTimeWeekdayTuesday: Tuesday\n - SdkTimeWeekdayWednesday: Wednesday\n - SdkTimeWeekdayThursday: Thursday\n - SdkTimeWeekdayFriday: Friday\n - SdkTimeWeekdaySaturday: Saturday",
      "title": "Defines times of day"
    },
    "apiSdkVolumeAttachRequest": {
      "type": "object",
      "properties": {
        "volume_id": {
          "type": "string",
          "title": "Id of volume"
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Options for attaching volume, right now only passphrase options is supported"
        }
      },
      "title": "Defines a request to attach a volume to the node receiving this request"
    },
    "apiSdkVolumeAttachResponse": {
      "type": "object",
      "properties": {
        "device_path": {
          "type": "string",
          "title": "Device path where device is exported"
        }
      },
      "title": "Defines a response from the node which received the request to attach"
    },
    "apiSdkVolumeCloneRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name of the volume. This will be used for idempotency."
        },
        "parent_id": {
          "type": "string",
          "description": "Parent volume id or snapshot id will create a new volume as a clone of the parent."
        }
      },
      "title": "Defines a request to clone a volume or create a volume from a snapshot"
    },
    "apiSdkVolumeCloneResponse": {
      "type": "object",
      "properties": {
        "volume_id": {
          "type": "string",
          "title": "Id of new volume"
        }
      },
      "title": "Defines the response when creating a clone from a volume or a snapshot"
    },
    "apiSdkVolumeCreateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name of the volume. This will be used for idempotency."
        },
        "spec": {
          "$ref": "#/definitions/apiVolumeSpec",
          "title": "Volume specification"
        }
      },
      "description": "Defines a request to create a volume. Use OpenStorageVolume.Update()\nto update any labels on the volume."
    },
    "apiSdkVolumeCreateResponse": {
      "type": "object",
      "properties": {
        "volume_id": {
          "type": "string",
          "title": "Id of new volume"
        }
      },
      "title": "Defines a response to the creation of a volume"
    },
    "apiSdkVolumeDeleteResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkVolumeDetachRequest": {
      "type": "object",
      "properties": {
        "volume_id": {
          "type": "string",
          "title": "Id of the volume"
        }
      },
      "title": "Defines a request to detach a volume"
    },
    "apiSdkVolumeDetachResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkVolumeEnumerateRequest": {
      "type": "object",
      "properties": {
        "locator": {
          "$ref": "#/definitions/apiVolumeLocator",
          "description": "Volumes to match to this locator.\nIf not provided, all volumes will be returned."
        }
      },
      "title": "Defines a request to list volumes"
    },
    "apiSdkVolumeEnumerateResponse": {
      "type": "object",
      "properties": {
        "volume_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of volumes matching label"
        }
      },
      "title": "Defines the response when listing volumes"
    },
    "apiSdkVolumeInspectResponse": {
      "type": "object",
      "properties": {
        "volume": {
          "$ref": "#/definitions/apiVolume",
          "title": "Information about the volume"
        }
      },
      "title": "Defines the response when inspecting a volume"
    },
    "apiSdkVolumeMountRequest": {
      "type": "object",
      "properties": {
        "volume_id": {
          "type": "string",
          "title": "Id of the volume"
        },
        "mount_path": {
          "type": "string",
          "description": "Mount path for mounting the volume."
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional options"
        }
      },
      "title": "Defines a request to mount a volume to the node receiving this request"
    },
    "apiSdkVolumeMountResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkVolumeSnapshotCreateRequest": {
      "type": "object",
      "properties": {
        "volume_id": {
          "type": "string",
          "title": "Id of volume to take the snapshot from"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Labels to apply to snapshot"
        }
      },
      "description": "Defines the request when creating a snapshot from a volume."
    },
    "apiSdkVolumeSnapshotCreateResponse": {
      "type": "object",
      "properties": {
        "snapshot_id": {
          "type": "string",
          "title": "Id of immutable snapshot"
        }
      },
      "title": "Defines a response after creating a snapshot of a volume"
    },
    "apiSdkVolumeSnapshotEnumerateRequest": {
      "type": "object",
      "properties": {
        "volume_id": {
          "type": "string",
          "title": "Id of volume"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Labels from snapshot"
        }
      },
      "title": "Defines a request to list the snaphots"
    },
    "apiSdkVolumeSnapshotEnumerateResponse": {
      "type": "object",
      "properties": {
        "volume_snapshot_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of immutable snapshots"
        }
      },
      "title": "Defines a response when listing snapshots"
    },
    "apiSdkVolumeSnapshotRestoreRequest": {
      "type": "object",
      "properties": {
        "volume_id": {
          "type": "string",
          "title": "Id of volume"
        },
        "snapshot_id": {
          "type": "string",
          "title": "Snapshot id to apply to `volume_id`"
        }
      },
      "title": "Defines a request to restore a volume to a snapshot"
    },
    "apiSdkVolumeSnapshotRestoreResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkVolumeUnmountRequest": {
      "type": "object",
      "properties": {
        "volume_id": {
          "type": "string",
          "title": "Id of volume"
        },
        "mount_path": {
          "type": "string",
          "title": "MountPath for device"
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Options to unmount device"
        }
      },
      "title": "Defines a request to unmount a volume on the node receiving this request"
    },
    "apiSdkVolumeUnmountResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSdkVolumeUpdateRequest": {
      "type": "object",
      "properties": {
        "volume_id": {
          "type": "string",
          "title": "Id of the volume to update"
        },
        "locator": {
          "$ref": "#/definitions/apiVolumeLocator",
          "description": "Change locator values. Some of these values may not be able to be changed.\nNew labels will be added to the current volume labels. To delete a label, set the\nvalue of the label to an empty string."
        },
        "spec": {
          "$ref": "#/definitions/apiVolumeSpecUpdate",
          "description": "VolumeSpecUpdate provides a method to request that certain values\nin the VolumeSpec are changed. This is necessary as a separate variable\nbecause values like int and bool in the VolumeSpec cannot be determined\nif they are being requested to change in gRPC proto3. Some of these\nvalues may not be able to be changed.\nHere are a few examples of actions that can be accomplished using the VolumeSpec.\nTo resize the volume: Set a new value in spec.size.\nTo change number of replicas: Adjust spec.ha_level.\nTo change the I/O Profile: Adjust spec.io_profile."
        }
      },
      "title": "This request is used to adjust or set new values in the volume"
    },
    "apiSdkVolumeUpdateResponse": {
      "type": "object",
      "title": "Empty response"
    },
    "apiSeverityType": {
      "type": "string",
      "enum": [
        "SEVERITY_TYPE_NONE",
        "SEVERITY_TYPE_ALARM",
        "SEVERITY_TYPE_WARNING",
        "SEVERITY_TYPE_NOTIFY"
      ],
      "default": "SEVERITY_TYPE_NONE"
    },
    "apiSource": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "A volume id, if specified will create a clone of the parent."
        },
        "seed": {
          "type": "string",
          "title": "Seed will seed the volume from the specified URI\nAny additional config for the source comes from the labels in the spec"
        }
      },
      "title": "Source is a structure that can be given to a volume\nto seed the volume with data.\nswagger:model"
    },
    "apiStorageCluster": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/openstorageapiStatus",
          "title": "Status of the cluster"
        },
        "id": {
          "type": "string",
          "title": "Id of the cluster"
        }
      },
      "title": "StorageCluster represents the state and information about the cluster"
    },
    "apiStorageMedium": {
      "type": "string",
      "enum": [
        "STORAGE_MEDIUM_MAGNETIC",
        "STORAGE_MEDIUM_SSD",
        "STORAGE_MEDIUM_NVME"
      ],
      "default": "STORAGE_MEDIUM_MAGNETIC",
      "title": "- STORAGE_MEDIUM_MAGNETIC: Magnetic spinning disk.\n - STORAGE_MEDIUM_SSD: SSD disk\n - STORAGE_MEDIUM_NVME: NVME disk"
    },
    "apiStorageNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the node"
        },
        "cpu": {
          "type": "number",
          "format": "double",
          "title": "Cpu usage of the node"
        },
        "mem_total": {
          "type": "string",
          "format": "uint64",
          "title": "Total memory of the node"
        },
        "mem_used": {
          "type": "string",
          "format": "uint64",
          "title": "Used memory of the node"
        },
        "mem_free": {
          "type": "string",
          "format": "uint64",
          "title": "Free memory of the node"
        },
        "avg_load": {
          "type": "string",
          "format": "int64",
          "title": "Average load (percentage)"
        },
        "status": {
          "$ref": "#/definitions/openstorageapiStatus",
          "title": "Node status"
        },
        "disks": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apiStorageResource"
          },
          "title": "List of disks on the node"
        },
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiStoragePool"
          },
          "title": "List of storage pools this node supports"
        },
        "mgmt_ip": {
          "type": "string",
          "title": "Management IP"
        },
        "data_ip": {
          "type": "string",
          "title": "Data IP"
        },
        "hostname": {
          "type": "string",
          "title": "Hostname of the node"
        },
        "node_labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "User defined labels for the node"
        }
      },
      "title": "StorageNode describes the state of the node"
    },
    "apiStoragePool": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "integer",
          "format": "int32",
          "title": "ID pool ID"
        },
        "Cos": {
          "$ref": "#/definitions/apiCosType",
          "title": "Cos reflects the capabilities of this drive pool"
        },
        "Medium": {
          "$ref": "#/definitions/apiStorageMedium",
          "title": "Medium underlying storage type"
        },
        "RaidLevel": {
          "type": "string",
          "title": "RaidLevel storage raid level"
        },
        "TotalSize": {
          "type": "string",
          "format": "uint64",
          "title": "TotalSize of the pool"
        },
        "Used": {
          "type": "string",
          "format": "uint64",
          "title": "Used size of the pool"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Labels is a list of user defined name-value pairs"
        }
      },
      "title": "StoragePool groups different storage devices based on their CosType"
    },
    "apiStorageResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id is the LUN identifier."
        },
        "path": {
          "type": "string",
          "description": "Path device path for this storage resource."
        },
        "medium": {
          "$ref": "#/definitions/apiStorageMedium",
          "description": "Storage medium."
        },
        "online": {
          "type": "boolean",
          "format": "boolean",
          "description": "True if this device is online."
        },
        "iops": {
          "type": "string",
          "format": "uint64",
          "title": "IOPS"
        },
        "seq_write": {
          "type": "number",
          "format": "double",
          "title": "SeqWrite"
        },
        "seq_read": {
          "type": "number",
          "format": "double",
          "title": "SeqRead"
        },
        "randRW": {
          "type": "number",
          "format": "double",
          "title": "RandRW"
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "description": "Total size in bytes."
        },
        "used": {
          "type": "string",
          "format": "uint64",
          "description": "Physical Bytes used."
        },
        "rotation_speed": {
          "type": "string",
          "description": "True if this device is rotational."
        },
        "last_scan": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of last time this device was scanned."
        },
        "metadata": {
          "type": "boolean",
          "format": "boolean",
          "description": "True if dedicated for metadata."
        }
      },
      "title": "StorageResource groups properties of a storage device.\nswagger:model"
    },
    "apiVolume": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Self referential volume ID."
        },
        "source": {
          "$ref": "#/definitions/apiSource",
          "description": "Source specified seed data for the volume."
        },
        "group": {
          "$ref": "#/definitions/apiGroup",
          "description": "Group volumes in the same group have the same group id."
        },
        "readonly": {
          "type": "boolean",
          "format": "boolean",
          "description": "Readonly is true if this volume is to be mounted with readonly access."
        },
        "locator": {
          "$ref": "#/definitions/apiVolumeLocator",
          "title": "User specified locator"
        },
        "ctime": {
          "type": "string",
          "format": "date-time",
          "title": "Volume creation time"
        },
        "spec": {
          "$ref": "#/definitions/apiVolumeSpec",
          "title": "User specified VolumeSpec"
        },
        "usage": {
          "type": "string",
          "format": "uint64",
          "description": "Usage is bytes consumed by vtheis volume."
        },
        "last_scan": {
          "type": "string",
          "format": "date-time",
          "description": "LastScan is the time when an integrity check was run."
        },
        "format": {
          "$ref": "#/definitions/apiFSType",
          "description": "Format specifies the filesytem for this volume."
        },
        "status": {
          "$ref": "#/definitions/apiVolumeStatus",
          "description": "Status is the availability status of this volume."
        },
        "state": {
          "$ref": "#/definitions/apiVolumeState",
          "description": "State is the current runtime state of this volume."
        },
        "attached_on": {
          "type": "string",
          "description": "AttachedOn is the node instance identifier for clustered systems."
        },
        "attached_state": {
          "$ref": "#/definitions/apiAttachState",
          "description": "AttachedState shows whether the device is attached for internal or external use."
        },
        "device_path": {
          "type": "string",
          "description": "DevicePath is the device exported by block device implementations."
        },
        "secure_device_path": {
          "type": "string",
          "description": "SecureDevicePath is the device path for an encrypted volume."
        },
        "attach_path": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "AttachPath is the mounted path in the host namespace."
        },
        "attach_info": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "AttachInfo is a list of name value mappings that provides attach information."
        },
        "replica_sets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiReplicaSet"
          },
          "description": "ReplicatSets storage for this volumefor clustered storage arrays."
        },
        "runtime_state": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRuntimeStateMap"
          },
          "description": "RuntimeState is a lst of name value mapping of driver specific runtime\ninformation."
        },
        "error": {
          "type": "string",
          "description": "Error is the Last recorded error."
        },
        "volume_consumers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiVolumeConsumer"
          },
          "title": "VolumeConsumers are entities that consume this volume"
        }
      },
      "title": "Volume represents an abstract storage volume.\nVolume represents an abstract storage volume.\nswagger:model"
    },
    "apiVolumeConsumer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name is the name of the volume consumer"
        },
        "namespace": {
          "type": "string",
          "title": "Namespace is the namespace of the volume consumer"
        },
        "type": {
          "type": "string",
          "title": "Type is the type of the consumer. E.g a Kubernetes pod"
        },
        "node_id": {
          "type": "string",
          "description": "NodeID is the identifier of the node on which the consumer is running. This\nidentifier would be from the perspective of the container runtime or\norchestrator under which the volume consumer resides. For example, NodeID\n can be name of a minion in Kubernetes."
        },
        "owner_name": {
          "type": "string",
          "title": "OwnerName is the name of the entity who owns this volume consumer"
        },
        "owner_type": {
          "type": "string",
          "description": "OwnerType is the type of the entity who owns this volume consumer. The type would\nbe from the perspective of the container runtime or the orchestrator under which\nthe volume consumer resides. For e.g OwnerType can be a Deployment in Kubernetes."
        }
      },
      "title": "VolumeConsumer identifies a consumer for a Volume. An example of a VolumeConsumer\nwould be a Pod in Kubernetes who has mounted the PersistentVolumeClaim for the\nVolume\nswagger: model"
    },
    "apiVolumeLocator": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "User friendly identifier"
        },
        "volume_labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "A set of name-value pairs that acts as search filters"
        }
      },
      "title": "VolumeLocator is a structure that is attached to a volume\nand is used to carry opaque metadata.\nswagger:model"
    },
    "apiVolumeSpec": {
      "type": "object",
      "properties": {
        "ephemeral": {
          "type": "boolean",
          "format": "boolean",
          "title": "Ephemeral storage"
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "title": "Size specifies the thin provisioned volume size in bytes"
        },
        "format": {
          "$ref": "#/definitions/apiFSType",
          "description": "Format specifies the filesystem for this volume."
        },
        "block_size": {
          "type": "string",
          "format": "int64",
          "description": "BlockSize for the filesystem."
        },
        "ha_level": {
          "type": "string",
          "format": "int64",
          "description": "HaLevel specifies the number of copies of data."
        },
        "cos": {
          "$ref": "#/definitions/apiCosType",
          "description": "Cos specifies the relative class of service."
        },
        "io_profile": {
          "$ref": "#/definitions/apiIoProfile",
          "description": "IoProfile provides a hint about application using this volume."
        },
        "dedupe": {
          "type": "boolean",
          "format": "boolean",
          "description": "Dedupe specifies if the volume data is to be de-duplicated."
        },
        "snapshot_interval": {
          "type": "integer",
          "format": "int64",
          "title": "SnapshotInterval in minutes, set to 0 to disable snapshots"
        },
        "volume_labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "VolumeLabels configuration labels"
        },
        "shared": {
          "type": "boolean",
          "format": "boolean",
          "description": "Shared is true if this volume can be remotely accessed."
        },
        "replica_set": {
          "$ref": "#/definitions/apiReplicaSet",
          "description": "ReplicaSet is the desired set of nodes for the volume data."
        },
        "aggregation_level": {
          "type": "integer",
          "format": "int64",
          "description": "Aggregatiokn level Specifies the number of parts the volume can be aggregated from."
        },
        "encrypted": {
          "type": "boolean",
          "format": "boolean",
          "description": "Encrypted is true if this volume will be cryptographically secured."
        },
        "passphrase": {
          "type": "string",
          "title": "Passphrase for an encrypted volume"
        },
        "snapshot_schedule": {
          "type": "string",
          "description": "SnapshotSchedule a well known string that specifies when snapshots should be taken."
        },
        "scale": {
          "type": "integer",
          "format": "int64",
          "description": "Scale allows autocreation of volumes."
        },
        "sticky": {
          "type": "boolean",
          "format": "boolean",
          "description": "Sticky volumes cannot be deleted until the flag is removed."
        },
        "group": {
          "$ref": "#/definitions/apiGroup",
          "title": "Group identifies a consistency group"
        },
        "group_enforced": {
          "type": "boolean",
          "format": "boolean",
          "description": "GroupEnforced is true if consistency group creation is enforced."
        },
        "compressed": {
          "type": "boolean",
          "format": "boolean",
          "description": "Compressed is true if this volume is to be compressed."
        },
        "cascaded": {
          "type": "boolean",
          "format": "boolean",
          "description": "Cascaded is true if this volume can be populated on any node from an external source."
        },
        "journal": {
          "type": "boolean",
          "format": "boolean",
          "description": "Journal is true if data for the volume goes into the journal."
        },
        "sharedv4": {
          "type": "boolean",
          "format": "boolean",
          "description": "Sharedv4 is true if this volume can be accessed via sharedv4."
        }
      },
      "title": "VolumeSpec has the properties needed to create a volume.\nswagger:model"
    },
    "apiVolumeSpecUpdate": {
      "type": "object",
      "properties": {
        "ephemeral": {
          "type": "boolean",
          "format": "boolean"
        },
        "size": {
          "type": "string",
          "format": "uint64"
        },
        "format": {
          "$ref": "#/definitions/apiFSType"
        },
        "block_size": {
          "type": "string",
          "format": "int64"
        },
        "ha_level": {
          "type": "string",
          "format": "int64"
        },
        "cos": {
          "$ref": "#/definitions/apiCosType"
        },
        "io_profile": {
          "$ref": "#/definitions/apiIoProfile"
        },
        "dedupe": {
          "type": "boolean",
          "format": "boolean"
        },
        "snapshot_interval": {
          "type": "integer",
          "format": "int64"
        },
        "volume_labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "VolumeLabels configuration labels"
        },
        "shared": {
          "type": "boolean",
          "format": "boolean"
        },
        "replica_set": {
          "$ref": "#/definitions/apiReplicaSet",
          "description": "ReplicaSet is the desired set of nodes for the volume data."
        },
        "aggregation_level": {
          "type": "integer",
          "format": "int64"
        },
        "encrypted": {
          "type": "boolean",
          "format": "boolean"
        },
        "passphrase": {
          "type": "string"
        },
        "snapshot_schedule": {
          "type": "string"
        },
        "scale": {
          "type": "integer",
          "format": "int64"
        },
        "sticky": {
          "type": "boolean",
          "format": "boolean"
        },
        "group": {
          "$ref": "#/definitions/apiGroup"
        },
        "group_enforced": {
          "type": "boolean",
          "format": "boolean"
        },
        "compressed": {
          "type": "boolean",
          "format": "boolean"
        },
        "cascaded": {
          "type": "boolean",
          "format": "boolean"
        },
        "journal": {
          "type": "boolean",
          "format": "boolean"
        },
        "sharedv4": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "title": "VolumeSpecUpdate provides a method to set any of the VolumeSpec of an existing volume"
    },
    "apiVolumeState": {
      "type": "string",
      "enum": [
        "VOLUME_STATE_NONE",
        "VOLUME_STATE_PENDING",
        "VOLUME_STATE_AVAILABLE",
        "VOLUME_STATE_ATTACHED",
        "VOLUME_STATE_DETACHED",
        "VOLUME_STATE_DETATCHING",
        "VOLUME_STATE_ERROR",
        "VOLUME_STATE_DELETED",
        "VOLUME_STATE_TRY_DETACHING",
        "VOLUME_STATE_RESTORE"
      ],
      "default": "VOLUME_STATE_NONE",
      "description": "VolumeState represents the state of a volume.\n\n - VOLUME_STATE_PENDING: Volume is transitioning to new state\n - VOLUME_STATE_AVAILABLE: Volume is ready to be assigned to a container\n - VOLUME_STATE_ATTACHED: Volume is attached to container\n - VOLUME_STATE_DETACHED: Volume is detached but associated with a container\n - VOLUME_STATE_DETATCHING: Volume detach is in progress\n - VOLUME_STATE_ERROR: Volume is in error state\n - VOLUME_STATE_DELETED: Volume is deleted, it will remain in this state\nwhile resources are asynchronously reclaimed\n - VOLUME_STATE_TRY_DETACHING: Volume is trying to be detached\n - VOLUME_STATE_RESTORE: Volume is undergoing restore"
    },
    "apiVolumeStatus": {
      "type": "string",
      "enum": [
        "VOLUME_STATUS_NONE",
        "VOLUME_STATUS_NOT_PRESENT",
        "VOLUME_STATUS_UP",
        "VOLUME_STATUS_DOWN",
        "VOLUME_STATUS_DEGRADED"
      ],
      "default": "VOLUME_STATUS_NONE",
      "description": "VolumeStatus represents a health status for a volume.\n\n - VOLUME_STATUS_NOT_PRESENT: Volume is not present\n - VOLUME_STATUS_UP: Volume is healthy\n - VOLUME_STATUS_DOWN: Volume is in fail mode\n - VOLUME_STATUS_DEGRADED: Volume is up but with degraded performance\nIn a RAID group, this may indicate a problem with one or more drives"
    },
    "openstorageapiStatus": {
      "type": "string",
      "enum": [
        "STATUS_NONE",
        "STATUS_INIT",
        "STATUS_OK",
        "STATUS_OFFLINE",
        "STATUS_ERROR",
        "STATUS_NOT_IN_QUORUM",
        "STATUS_DECOMMISSION",
        "STATUS_MAINTENANCE",
        "STATUS_STORAGE_DOWN",
        "STATUS_STORAGE_DEGRADED",
        "STATUS_NEEDS_REBOOT",
        "STATUS_STORAGE_REBALANCE",
        "STATUS_STORAGE_DRIVE_REPLACE",
        "STATUS_NOT_IN_QUORUM_NO_STORAGE",
        "STATUS_MAX"
      ],
      "default": "STATUS_NONE",
      "title": "- STATUS_MAX: Add statuses before MAX and update the number for MAX"
    }
  }
}
