// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/client/client.proto

/*
Package client is a generated protocol buffer package.

It is generated from these files:
	api/client/client.proto

It has these top-level messages:
	Node
	FluentDConfig
	TunnelConfig
	Cluster
	ClusterEnumerateRequest
	ClusterEnumerateResponse
	ClusterInspectRequest
	ClusterInspectResponse
	ClusterSetSizeRequest
	ClusterSetSizeResponse
	ClusterRemoveRequest
	ClusterRemoveResponse
	ClusterNodeStatusRequest
	ClusterNodeStatusResponse
	ClusterPeerStatusRequest
	ClusterPeerStatusResponse
	ClusterGetNodeIdFromIpRequest
	ClusterGetNodeIdFromIpResponse
	ClusterEnumerateAlertsRequest
	ClusterEnumerateAlertsResponse
	ClusterClearAlertRequest
	ClusterClearAlertResponse
	ClusterEraseAlertRequest
	ClusterEraseAlertResponse
*/
package client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import openstorage_api "github.com/libopenstorage/openstorage/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Used to change to api.Node
type Node struct {
	Id        string                                      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Cpu       float64                                     `protobuf:"fixed64,2,opt,name=cpu" json:"cpu,omitempty"`
	MemTotal  uint64                                      `protobuf:"varint,3,opt,name=mem_total,json=memTotal" json:"mem_total,omitempty"`
	MemUsed   uint64                                      `protobuf:"varint,4,opt,name=mem_used,json=memUsed" json:"mem_used,omitempty"`
	MemFree   uint64                                      `protobuf:"varint,5,opt,name=mem_free,json=memFree" json:"mem_free,omitempty"`
	AvgLoad   int64                                       `protobuf:"varint,6,opt,name=avg_load,json=avgLoad" json:"avg_load,omitempty"`
	Status    openstorage_api.Status                      `protobuf:"varint,7,opt,name=status,enum=openstorage.api.Status" json:"status,omitempty"`
	GenNumber uint64                                      `protobuf:"varint,8,opt,name=gen_number,json=genNumber" json:"gen_number,omitempty"`
	Disks     map[string]*openstorage_api.StorageResource `protobuf:"bytes,9,rep,name=disks" json:"disks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Pools     []*openstorage_api.StoragePool              `protobuf:"bytes,10,rep,name=pools" json:"pools,omitempty"`
	MgmtIp    string                                      `protobuf:"bytes,11,opt,name=mgmt_ip,json=mgmtIp" json:"mgmt_ip,omitempty"`
	DataIp    string                                      `protobuf:"bytes,12,opt,name=data_ip,json=dataIp" json:"data_ip,omitempty"`
	Timestamp *google_protobuf.Timestamp                  `protobuf:"bytes,13,opt,name=timestamp" json:"timestamp,omitempty"`
	StartTime *google_protobuf.Timestamp                  `protobuf:"bytes,14,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Hostname  string                                      `protobuf:"bytes,15,opt,name=hostname" json:"hostname,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetCpu() float64 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *Node) GetMemTotal() uint64 {
	if m != nil {
		return m.MemTotal
	}
	return 0
}

func (m *Node) GetMemUsed() uint64 {
	if m != nil {
		return m.MemUsed
	}
	return 0
}

func (m *Node) GetMemFree() uint64 {
	if m != nil {
		return m.MemFree
	}
	return 0
}

func (m *Node) GetAvgLoad() int64 {
	if m != nil {
		return m.AvgLoad
	}
	return 0
}

func (m *Node) GetStatus() openstorage_api.Status {
	if m != nil {
		return m.Status
	}
	return openstorage_api.Status_STATUS_NONE
}

func (m *Node) GetGenNumber() uint64 {
	if m != nil {
		return m.GenNumber
	}
	return 0
}

func (m *Node) GetDisks() map[string]*openstorage_api.StorageResource {
	if m != nil {
		return m.Disks
	}
	return nil
}

func (m *Node) GetPools() []*openstorage_api.StoragePool {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *Node) GetMgmtIp() string {
	if m != nil {
		return m.MgmtIp
	}
	return ""
}

func (m *Node) GetDataIp() string {
	if m != nil {
		return m.DataIp
	}
	return ""
}

func (m *Node) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Node) GetStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Node) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

// Used to change to api.FluentDConfig
type FluentDConfig struct {
	Ip   string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
}

func (m *FluentDConfig) Reset()                    { *m = FluentDConfig{} }
func (m *FluentDConfig) String() string            { return proto.CompactTextString(m) }
func (*FluentDConfig) ProtoMessage()               {}
func (*FluentDConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FluentDConfig) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *FluentDConfig) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

// Used to change to api.TunnelConfig
type TunnelConfig struct {
	Key      string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Cert     string `protobuf:"bytes,2,opt,name=cert" json:"cert,omitempty"`
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint" json:"endpoint,omitempty"`
}

func (m *TunnelConfig) Reset()                    { *m = TunnelConfig{} }
func (m *TunnelConfig) String() string            { return proto.CompactTextString(m) }
func (*TunnelConfig) ProtoMessage()               {}
func (*TunnelConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TunnelConfig) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *TunnelConfig) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

func (m *TunnelConfig) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

// Used to change api.Cluster
type Cluster struct {
	Status        openstorage_api.Status `protobuf:"varint,1,opt,name=status,enum=openstorage.api.Status" json:"status,omitempty"`
	Id            string                 `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	NodeId        string                 `protobuf:"bytes,3,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Nodes         []*Node                `protobuf:"bytes,4,rep,name=nodes" json:"nodes,omitempty"`
	LoggingUrl    string                 `protobuf:"bytes,5,opt,name=logging_url,json=loggingUrl" json:"logging_url,omitempty"`
	ManagementUrl string                 `protobuf:"bytes,6,opt,name=management_url,json=managementUrl" json:"management_url,omitempty"`
	FluentDConfig *FluentDConfig         `protobuf:"bytes,7,opt,name=fluent_d_config,json=fluentDConfig" json:"fluent_d_config,omitempty"`
	TunnelConfig  *TunnelConfig          `protobuf:"bytes,8,opt,name=tunnel_config,json=tunnelConfig" json:"tunnel_config,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Cluster) GetStatus() openstorage_api.Status {
	if m != nil {
		return m.Status
	}
	return openstorage_api.Status_STATUS_NONE
}

func (m *Cluster) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Cluster) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *Cluster) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Cluster) GetLoggingUrl() string {
	if m != nil {
		return m.LoggingUrl
	}
	return ""
}

func (m *Cluster) GetManagementUrl() string {
	if m != nil {
		return m.ManagementUrl
	}
	return ""
}

func (m *Cluster) GetFluentDConfig() *FluentDConfig {
	if m != nil {
		return m.FluentDConfig
	}
	return nil
}

func (m *Cluster) GetTunnelConfig() *TunnelConfig {
	if m != nil {
		return m.TunnelConfig
	}
	return nil
}

// Enumerate
type ClusterEnumerateRequest struct {
}

func (m *ClusterEnumerateRequest) Reset()                    { *m = ClusterEnumerateRequest{} }
func (m *ClusterEnumerateRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterEnumerateRequest) ProtoMessage()               {}
func (*ClusterEnumerateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ClusterEnumerateResponse struct {
	Cluster *Cluster `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *ClusterEnumerateResponse) Reset()                    { *m = ClusterEnumerateResponse{} }
func (m *ClusterEnumerateResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterEnumerateResponse) ProtoMessage()               {}
func (*ClusterEnumerateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ClusterEnumerateResponse) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

// Inspect
type ClusterInspectRequest struct {
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (m *ClusterInspectRequest) Reset()                    { *m = ClusterInspectRequest{} }
func (m *ClusterInspectRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterInspectRequest) ProtoMessage()               {}
func (*ClusterInspectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ClusterInspectRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type ClusterInspectResponse struct {
	Node *Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *ClusterInspectResponse) Reset()                    { *m = ClusterInspectResponse{} }
func (m *ClusterInspectResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterInspectResponse) ProtoMessage()               {}
func (*ClusterInspectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ClusterInspectResponse) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

// SetSize
type ClusterSetSizeRequest struct {
	Size int32 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
}

func (m *ClusterSetSizeRequest) Reset()                    { *m = ClusterSetSizeRequest{} }
func (m *ClusterSetSizeRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterSetSizeRequest) ProtoMessage()               {}
func (*ClusterSetSizeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ClusterSetSizeRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type ClusterSetSizeResponse struct {
}

func (m *ClusterSetSizeResponse) Reset()                    { *m = ClusterSetSizeResponse{} }
func (m *ClusterSetSizeResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterSetSizeResponse) ProtoMessage()               {}
func (*ClusterSetSizeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// Remove
type ClusterRemoveRequest struct {
	Nodes       []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	ForceRemove bool    `protobuf:"varint,2,opt,name=force_remove,json=forceRemove" json:"force_remove,omitempty"`
}

func (m *ClusterRemoveRequest) Reset()                    { *m = ClusterRemoveRequest{} }
func (m *ClusterRemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterRemoveRequest) ProtoMessage()               {}
func (*ClusterRemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ClusterRemoveRequest) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *ClusterRemoveRequest) GetForceRemove() bool {
	if m != nil {
		return m.ForceRemove
	}
	return false
}

type ClusterRemoveResponse struct {
}

func (m *ClusterRemoveResponse) Reset()                    { *m = ClusterRemoveResponse{} }
func (m *ClusterRemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterRemoveResponse) ProtoMessage()               {}
func (*ClusterRemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// NodeStatus
type ClusterNodeStatusRequest struct {
}

func (m *ClusterNodeStatusRequest) Reset()                    { *m = ClusterNodeStatusRequest{} }
func (m *ClusterNodeStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterNodeStatusRequest) ProtoMessage()               {}
func (*ClusterNodeStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type ClusterNodeStatusResponse struct {
	Status openstorage_api.Status `protobuf:"varint,1,opt,name=status,enum=openstorage.api.Status" json:"status,omitempty"`
}

func (m *ClusterNodeStatusResponse) Reset()                    { *m = ClusterNodeStatusResponse{} }
func (m *ClusterNodeStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterNodeStatusResponse) ProtoMessage()               {}
func (*ClusterNodeStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ClusterNodeStatusResponse) GetStatus() openstorage_api.Status {
	if m != nil {
		return m.Status
	}
	return openstorage_api.Status_STATUS_NONE
}

type ClusterPeerStatusRequest struct {
	ListenerName string `protobuf:"bytes,1,opt,name=listener_name,json=listenerName" json:"listener_name,omitempty"`
}

func (m *ClusterPeerStatusRequest) Reset()                    { *m = ClusterPeerStatusRequest{} }
func (m *ClusterPeerStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterPeerStatusRequest) ProtoMessage()               {}
func (*ClusterPeerStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ClusterPeerStatusRequest) GetListenerName() string {
	if m != nil {
		return m.ListenerName
	}
	return ""
}

type ClusterPeerStatusResponse struct {
	Statuses map[string]openstorage_api.Status `protobuf:"bytes,1,rep,name=statuses" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=openstorage.api.Status"`
}

func (m *ClusterPeerStatusResponse) Reset()                    { *m = ClusterPeerStatusResponse{} }
func (m *ClusterPeerStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterPeerStatusResponse) ProtoMessage()               {}
func (*ClusterPeerStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ClusterPeerStatusResponse) GetStatuses() map[string]openstorage_api.Status {
	if m != nil {
		return m.Statuses
	}
	return nil
}

type ClusterGetNodeIdFromIpRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *ClusterGetNodeIdFromIpRequest) Reset()                    { *m = ClusterGetNodeIdFromIpRequest{} }
func (m *ClusterGetNodeIdFromIpRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterGetNodeIdFromIpRequest) ProtoMessage()               {}
func (*ClusterGetNodeIdFromIpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ClusterGetNodeIdFromIpRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type ClusterGetNodeIdFromIpResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ClusterGetNodeIdFromIpResponse) Reset()                    { *m = ClusterGetNodeIdFromIpResponse{} }
func (m *ClusterGetNodeIdFromIpResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterGetNodeIdFromIpResponse) ProtoMessage()               {}
func (*ClusterGetNodeIdFromIpResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ClusterGetNodeIdFromIpResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ClusterEnumerateAlertsRequest struct {
	TimeStart *google_protobuf.Timestamp   `protobuf:"bytes,1,opt,name=time_start,json=timeStart" json:"time_start,omitempty"`
	TimeEnd   *google_protobuf.Timestamp   `protobuf:"bytes,2,opt,name=time_end,json=timeEnd" json:"time_end,omitempty"`
	Resource  openstorage_api.ResourceType `protobuf:"varint,3,opt,name=resource,enum=openstorage.api.ResourceType" json:"resource,omitempty"`
}

func (m *ClusterEnumerateAlertsRequest) Reset()                    { *m = ClusterEnumerateAlertsRequest{} }
func (m *ClusterEnumerateAlertsRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterEnumerateAlertsRequest) ProtoMessage()               {}
func (*ClusterEnumerateAlertsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ClusterEnumerateAlertsRequest) GetTimeStart() *google_protobuf.Timestamp {
	if m != nil {
		return m.TimeStart
	}
	return nil
}

func (m *ClusterEnumerateAlertsRequest) GetTimeEnd() *google_protobuf.Timestamp {
	if m != nil {
		return m.TimeEnd
	}
	return nil
}

func (m *ClusterEnumerateAlertsRequest) GetResource() openstorage_api.ResourceType {
	if m != nil {
		return m.Resource
	}
	return openstorage_api.ResourceType_RESOURCE_TYPE_NONE
}

type ClusterEnumerateAlertsResponse struct {
	Alerts *openstorage_api.Alerts `protobuf:"bytes,1,opt,name=alerts" json:"alerts,omitempty"`
}

func (m *ClusterEnumerateAlertsResponse) Reset()                    { *m = ClusterEnumerateAlertsResponse{} }
func (m *ClusterEnumerateAlertsResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterEnumerateAlertsResponse) ProtoMessage()               {}
func (*ClusterEnumerateAlertsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ClusterEnumerateAlertsResponse) GetAlerts() *openstorage_api.Alerts {
	if m != nil {
		return m.Alerts
	}
	return nil
}

type ClusterClearAlertRequest struct {
	Resource openstorage_api.ResourceType `protobuf:"varint,1,opt,name=resource,enum=openstorage.api.ResourceType" json:"resource,omitempty"`
	AlertId  int64                        `protobuf:"varint,2,opt,name=alert_id,json=alertId" json:"alert_id,omitempty"`
}

func (m *ClusterClearAlertRequest) Reset()                    { *m = ClusterClearAlertRequest{} }
func (m *ClusterClearAlertRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterClearAlertRequest) ProtoMessage()               {}
func (*ClusterClearAlertRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ClusterClearAlertRequest) GetResource() openstorage_api.ResourceType {
	if m != nil {
		return m.Resource
	}
	return openstorage_api.ResourceType_RESOURCE_TYPE_NONE
}

func (m *ClusterClearAlertRequest) GetAlertId() int64 {
	if m != nil {
		return m.AlertId
	}
	return 0
}

type ClusterClearAlertResponse struct {
}

func (m *ClusterClearAlertResponse) Reset()                    { *m = ClusterClearAlertResponse{} }
func (m *ClusterClearAlertResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterClearAlertResponse) ProtoMessage()               {}
func (*ClusterClearAlertResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type ClusterEraseAlertRequest struct {
	Resource openstorage_api.ResourceType `protobuf:"varint,1,opt,name=resource,enum=openstorage.api.ResourceType" json:"resource,omitempty"`
	AlertId  int64                        `protobuf:"varint,2,opt,name=alert_id,json=alertId" json:"alert_id,omitempty"`
}

func (m *ClusterEraseAlertRequest) Reset()                    { *m = ClusterEraseAlertRequest{} }
func (m *ClusterEraseAlertRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterEraseAlertRequest) ProtoMessage()               {}
func (*ClusterEraseAlertRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ClusterEraseAlertRequest) GetResource() openstorage_api.ResourceType {
	if m != nil {
		return m.Resource
	}
	return openstorage_api.ResourceType_RESOURCE_TYPE_NONE
}

func (m *ClusterEraseAlertRequest) GetAlertId() int64 {
	if m != nil {
		return m.AlertId
	}
	return 0
}

type ClusterEraseAlertResponse struct {
}

func (m *ClusterEraseAlertResponse) Reset()                    { *m = ClusterEraseAlertResponse{} }
func (m *ClusterEraseAlertResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterEraseAlertResponse) ProtoMessage()               {}
func (*ClusterEraseAlertResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func init() {
	proto.RegisterType((*Node)(nil), "openstorage.api.client.Node")
	proto.RegisterType((*FluentDConfig)(nil), "openstorage.api.client.FluentDConfig")
	proto.RegisterType((*TunnelConfig)(nil), "openstorage.api.client.TunnelConfig")
	proto.RegisterType((*Cluster)(nil), "openstorage.api.client.Cluster")
	proto.RegisterType((*ClusterEnumerateRequest)(nil), "openstorage.api.client.ClusterEnumerateRequest")
	proto.RegisterType((*ClusterEnumerateResponse)(nil), "openstorage.api.client.ClusterEnumerateResponse")
	proto.RegisterType((*ClusterInspectRequest)(nil), "openstorage.api.client.ClusterInspectRequest")
	proto.RegisterType((*ClusterInspectResponse)(nil), "openstorage.api.client.ClusterInspectResponse")
	proto.RegisterType((*ClusterSetSizeRequest)(nil), "openstorage.api.client.ClusterSetSizeRequest")
	proto.RegisterType((*ClusterSetSizeResponse)(nil), "openstorage.api.client.ClusterSetSizeResponse")
	proto.RegisterType((*ClusterRemoveRequest)(nil), "openstorage.api.client.ClusterRemoveRequest")
	proto.RegisterType((*ClusterRemoveResponse)(nil), "openstorage.api.client.ClusterRemoveResponse")
	proto.RegisterType((*ClusterNodeStatusRequest)(nil), "openstorage.api.client.ClusterNodeStatusRequest")
	proto.RegisterType((*ClusterNodeStatusResponse)(nil), "openstorage.api.client.ClusterNodeStatusResponse")
	proto.RegisterType((*ClusterPeerStatusRequest)(nil), "openstorage.api.client.ClusterPeerStatusRequest")
	proto.RegisterType((*ClusterPeerStatusResponse)(nil), "openstorage.api.client.ClusterPeerStatusResponse")
	proto.RegisterType((*ClusterGetNodeIdFromIpRequest)(nil), "openstorage.api.client.ClusterGetNodeIdFromIpRequest")
	proto.RegisterType((*ClusterGetNodeIdFromIpResponse)(nil), "openstorage.api.client.ClusterGetNodeIdFromIpResponse")
	proto.RegisterType((*ClusterEnumerateAlertsRequest)(nil), "openstorage.api.client.ClusterEnumerateAlertsRequest")
	proto.RegisterType((*ClusterEnumerateAlertsResponse)(nil), "openstorage.api.client.ClusterEnumerateAlertsResponse")
	proto.RegisterType((*ClusterClearAlertRequest)(nil), "openstorage.api.client.ClusterClearAlertRequest")
	proto.RegisterType((*ClusterClearAlertResponse)(nil), "openstorage.api.client.ClusterClearAlertResponse")
	proto.RegisterType((*ClusterEraseAlertRequest)(nil), "openstorage.api.client.ClusterEraseAlertRequest")
	proto.RegisterType((*ClusterEraseAlertResponse)(nil), "openstorage.api.client.ClusterEraseAlertResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OpenStorageCluster service

type OpenStorageClusterClient interface {
	// Enumerate lists all the nodes in the cluster.
	Enumerate(ctx context.Context, in *ClusterEnumerateRequest, opts ...grpc.CallOption) (*ClusterEnumerateResponse, error)
	// Inspect the node given a UUID.
	Inspect(ctx context.Context, in *ClusterInspectRequest, opts ...grpc.CallOption) (*ClusterInspectResponse, error)
	// SetSize sets the maximum number of nodes in a cluster.
	SetSize(ctx context.Context, in *ClusterSetSizeRequest, opts ...grpc.CallOption) (*ClusterSetSizeResponse, error)
	Remove(ctx context.Context, in *ClusterRemoveRequest, opts ...grpc.CallOption) (*ClusterRemoveResponse, error)
	NodeStatus(ctx context.Context, in *ClusterNodeStatusRequest, opts ...grpc.CallOption) (*ClusterNodeStatusResponse, error)
	PeerStatus(ctx context.Context, in *ClusterPeerStatusRequest, opts ...grpc.CallOption) (*ClusterPeerStatusResponse, error)
	GetNodeIdFromIp(ctx context.Context, in *ClusterGetNodeIdFromIpRequest, opts ...grpc.CallOption) (*ClusterGetNodeIdFromIpResponse, error)
	EnumerateAlerts(ctx context.Context, in *ClusterEnumerateAlertsRequest, opts ...grpc.CallOption) (*ClusterEnumerateAlertsResponse, error)
	ClearAlert(ctx context.Context, in *ClusterClearAlertRequest, opts ...grpc.CallOption) (*ClusterClearAlertResponse, error)
	EraseAlert(ctx context.Context, in *ClusterEraseAlertRequest, opts ...grpc.CallOption) (*ClusterEraseAlertResponse, error)
}

type openStorageClusterClient struct {
	cc *grpc.ClientConn
}

func NewOpenStorageClusterClient(cc *grpc.ClientConn) OpenStorageClusterClient {
	return &openStorageClusterClient{cc}
}

func (c *openStorageClusterClient) Enumerate(ctx context.Context, in *ClusterEnumerateRequest, opts ...grpc.CallOption) (*ClusterEnumerateResponse, error) {
	out := new(ClusterEnumerateResponse)
	err := grpc.Invoke(ctx, "/openstorage.api.client.OpenStorageCluster/Enumerate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterClient) Inspect(ctx context.Context, in *ClusterInspectRequest, opts ...grpc.CallOption) (*ClusterInspectResponse, error) {
	out := new(ClusterInspectResponse)
	err := grpc.Invoke(ctx, "/openstorage.api.client.OpenStorageCluster/Inspect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterClient) SetSize(ctx context.Context, in *ClusterSetSizeRequest, opts ...grpc.CallOption) (*ClusterSetSizeResponse, error) {
	out := new(ClusterSetSizeResponse)
	err := grpc.Invoke(ctx, "/openstorage.api.client.OpenStorageCluster/SetSize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterClient) Remove(ctx context.Context, in *ClusterRemoveRequest, opts ...grpc.CallOption) (*ClusterRemoveResponse, error) {
	out := new(ClusterRemoveResponse)
	err := grpc.Invoke(ctx, "/openstorage.api.client.OpenStorageCluster/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterClient) NodeStatus(ctx context.Context, in *ClusterNodeStatusRequest, opts ...grpc.CallOption) (*ClusterNodeStatusResponse, error) {
	out := new(ClusterNodeStatusResponse)
	err := grpc.Invoke(ctx, "/openstorage.api.client.OpenStorageCluster/NodeStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterClient) PeerStatus(ctx context.Context, in *ClusterPeerStatusRequest, opts ...grpc.CallOption) (*ClusterPeerStatusResponse, error) {
	out := new(ClusterPeerStatusResponse)
	err := grpc.Invoke(ctx, "/openstorage.api.client.OpenStorageCluster/PeerStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterClient) GetNodeIdFromIp(ctx context.Context, in *ClusterGetNodeIdFromIpRequest, opts ...grpc.CallOption) (*ClusterGetNodeIdFromIpResponse, error) {
	out := new(ClusterGetNodeIdFromIpResponse)
	err := grpc.Invoke(ctx, "/openstorage.api.client.OpenStorageCluster/GetNodeIdFromIp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterClient) EnumerateAlerts(ctx context.Context, in *ClusterEnumerateAlertsRequest, opts ...grpc.CallOption) (*ClusterEnumerateAlertsResponse, error) {
	out := new(ClusterEnumerateAlertsResponse)
	err := grpc.Invoke(ctx, "/openstorage.api.client.OpenStorageCluster/EnumerateAlerts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterClient) ClearAlert(ctx context.Context, in *ClusterClearAlertRequest, opts ...grpc.CallOption) (*ClusterClearAlertResponse, error) {
	out := new(ClusterClearAlertResponse)
	err := grpc.Invoke(ctx, "/openstorage.api.client.OpenStorageCluster/ClearAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openStorageClusterClient) EraseAlert(ctx context.Context, in *ClusterEraseAlertRequest, opts ...grpc.CallOption) (*ClusterEraseAlertResponse, error) {
	out := new(ClusterEraseAlertResponse)
	err := grpc.Invoke(ctx, "/openstorage.api.client.OpenStorageCluster/EraseAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpenStorageCluster service

type OpenStorageClusterServer interface {
	// Enumerate lists all the nodes in the cluster.
	Enumerate(context.Context, *ClusterEnumerateRequest) (*ClusterEnumerateResponse, error)
	// Inspect the node given a UUID.
	Inspect(context.Context, *ClusterInspectRequest) (*ClusterInspectResponse, error)
	// SetSize sets the maximum number of nodes in a cluster.
	SetSize(context.Context, *ClusterSetSizeRequest) (*ClusterSetSizeResponse, error)
	Remove(context.Context, *ClusterRemoveRequest) (*ClusterRemoveResponse, error)
	NodeStatus(context.Context, *ClusterNodeStatusRequest) (*ClusterNodeStatusResponse, error)
	PeerStatus(context.Context, *ClusterPeerStatusRequest) (*ClusterPeerStatusResponse, error)
	GetNodeIdFromIp(context.Context, *ClusterGetNodeIdFromIpRequest) (*ClusterGetNodeIdFromIpResponse, error)
	EnumerateAlerts(context.Context, *ClusterEnumerateAlertsRequest) (*ClusterEnumerateAlertsResponse, error)
	ClearAlert(context.Context, *ClusterClearAlertRequest) (*ClusterClearAlertResponse, error)
	EraseAlert(context.Context, *ClusterEraseAlertRequest) (*ClusterEraseAlertResponse, error)
}

func RegisterOpenStorageClusterServer(s *grpc.Server, srv OpenStorageClusterServer) {
	s.RegisterService(&_OpenStorageCluster_serviceDesc, srv)
}

func _OpenStorageCluster_Enumerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterEnumerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterServer).Enumerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.client.OpenStorageCluster/Enumerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterServer).Enumerate(ctx, req.(*ClusterEnumerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCluster_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInspectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.client.OpenStorageCluster/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterServer).Inspect(ctx, req.(*ClusterInspectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCluster_SetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterSetSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterServer).SetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.client.OpenStorageCluster/SetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterServer).SetSize(ctx, req.(*ClusterSetSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCluster_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.client.OpenStorageCluster/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterServer).Remove(ctx, req.(*ClusterRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCluster_NodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterNodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterServer).NodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.client.OpenStorageCluster/NodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterServer).NodeStatus(ctx, req.(*ClusterNodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCluster_PeerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterPeerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterServer).PeerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.client.OpenStorageCluster/PeerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterServer).PeerStatus(ctx, req.(*ClusterPeerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCluster_GetNodeIdFromIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterGetNodeIdFromIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterServer).GetNodeIdFromIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.client.OpenStorageCluster/GetNodeIdFromIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterServer).GetNodeIdFromIp(ctx, req.(*ClusterGetNodeIdFromIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCluster_EnumerateAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterEnumerateAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterServer).EnumerateAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.client.OpenStorageCluster/EnumerateAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterServer).EnumerateAlerts(ctx, req.(*ClusterEnumerateAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCluster_ClearAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterClearAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterServer).ClearAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.client.OpenStorageCluster/ClearAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterServer).ClearAlert(ctx, req.(*ClusterClearAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenStorageCluster_EraseAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterEraseAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenStorageClusterServer).EraseAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openstorage.api.client.OpenStorageCluster/EraseAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenStorageClusterServer).EraseAlert(ctx, req.(*ClusterEraseAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenStorageCluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openstorage.api.client.OpenStorageCluster",
	HandlerType: (*OpenStorageClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enumerate",
			Handler:    _OpenStorageCluster_Enumerate_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _OpenStorageCluster_Inspect_Handler,
		},
		{
			MethodName: "SetSize",
			Handler:    _OpenStorageCluster_SetSize_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _OpenStorageCluster_Remove_Handler,
		},
		{
			MethodName: "NodeStatus",
			Handler:    _OpenStorageCluster_NodeStatus_Handler,
		},
		{
			MethodName: "PeerStatus",
			Handler:    _OpenStorageCluster_PeerStatus_Handler,
		},
		{
			MethodName: "GetNodeIdFromIp",
			Handler:    _OpenStorageCluster_GetNodeIdFromIp_Handler,
		},
		{
			MethodName: "EnumerateAlerts",
			Handler:    _OpenStorageCluster_EnumerateAlerts_Handler,
		},
		{
			MethodName: "ClearAlert",
			Handler:    _OpenStorageCluster_ClearAlert_Handler,
		},
		{
			MethodName: "EraseAlert",
			Handler:    _OpenStorageCluster_EraseAlert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/client/client.proto",
}

func init() { proto.RegisterFile("api/client/client.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x5f, 0x6f, 0xdc, 0x44,
	0x10, 0x8f, 0x93, 0xcb, 0xfd, 0x99, 0xcb, 0xa5, 0x68, 0x05, 0x8d, 0xeb, 0x52, 0x7a, 0x18, 0x2a,
	0x4e, 0x82, 0xde, 0x85, 0xab, 0x5a, 0x35, 0x48, 0xa8, 0x82, 0x36, 0x45, 0x87, 0x4a, 0x08, 0x4e,
	0xfa, 0x52, 0x1e, 0x2c, 0xe7, 0x3c, 0xe7, 0x9a, 0xda, 0xbb, 0xc6, 0x5e, 0x47, 0x6a, 0x1f, 0xf9,
	0x2e, 0x7c, 0x1b, 0xc4, 0xe7, 0x81, 0x37, 0xb4, 0xeb, 0xbd, 0xb5, 0xef, 0x5f, 0x9d, 0xbc, 0xf0,
	0x74, 0xbb, 0x3b, 0x7f, 0x7e, 0xb3, 0x33, 0xb3, 0xbf, 0xf1, 0xc1, 0x81, 0x97, 0x84, 0xa3, 0x69,
	0x14, 0x22, 0xe5, 0xea, 0x67, 0x98, 0xa4, 0x8c, 0x33, 0x72, 0x93, 0x25, 0x48, 0x33, 0xce, 0x52,
	0x2f, 0xc0, 0xa1, 0x97, 0x84, 0xc3, 0x42, 0x6a, 0xdd, 0x0d, 0x18, 0x0b, 0x22, 0x1c, 0x49, 0xad,
	0x8b, 0x7c, 0x36, 0xe2, 0x61, 0x8c, 0x19, 0xf7, 0xe2, 0xa4, 0x30, 0xb4, 0x7a, 0xc2, 0xa3, 0x30,
	0x90, 0x5b, 0xfb, 0x9f, 0x06, 0x34, 0x4e, 0x98, 0x8f, 0x64, 0x1f, 0xb6, 0x43, 0xdf, 0x34, 0xfa,
	0xc6, 0xa0, 0xe3, 0x6c, 0x87, 0x3e, 0xf9, 0x00, 0x76, 0xa6, 0x49, 0x6e, 0x6e, 0xf7, 0x8d, 0x81,
	0xe1, 0x88, 0x25, 0xb9, 0x0d, 0x9d, 0x18, 0x63, 0x97, 0x33, 0xee, 0x45, 0xe6, 0x4e, 0xdf, 0x18,
	0x34, 0x9c, 0x76, 0x8c, 0xf1, 0xb9, 0xd8, 0x93, 0x5b, 0x20, 0xd6, 0x6e, 0x9e, 0xa1, 0x6f, 0x36,
	0xa4, 0xac, 0x15, 0x63, 0xfc, 0x32, 0x43, 0x7f, 0x2e, 0x9a, 0xa5, 0x88, 0xe6, 0xae, 0x16, 0x3d,
	0x4f, 0x11, 0x85, 0xc8, 0xbb, 0x0c, 0xdc, 0x88, 0x79, 0xbe, 0xd9, 0xec, 0x1b, 0x83, 0x1d, 0xa7,
	0xe5, 0x5d, 0x06, 0x2f, 0x98, 0xe7, 0x93, 0x11, 0x34, 0x33, 0xee, 0xf1, 0x3c, 0x33, 0x5b, 0x7d,
	0x63, 0xb0, 0x3f, 0x3e, 0x18, 0x2e, 0xdf, 0xf8, 0x4c, 0x8a, 0x1d, 0xa5, 0x46, 0xee, 0x00, 0x04,
	0x48, 0x5d, 0x9a, 0xc7, 0x17, 0x98, 0x9a, 0x6d, 0x09, 0xd4, 0x09, 0x90, 0x9e, 0xc8, 0x03, 0xf2,
	0x2d, 0xec, 0xfa, 0x61, 0xf6, 0x26, 0x33, 0x3b, 0xfd, 0x9d, 0x41, 0x77, 0xfc, 0xc5, 0x70, 0x7d,
	0x02, 0x87, 0x22, 0x19, 0xc3, 0x67, 0x42, 0xf3, 0x98, 0xf2, 0xf4, 0xad, 0x53, 0x58, 0x91, 0x31,
	0xec, 0x26, 0x8c, 0x45, 0x99, 0x09, 0xd2, 0xfc, 0xe3, 0x35, 0xd1, 0xc8, 0xf5, 0x29, 0x63, 0x91,
	0x53, 0xa8, 0x92, 0x03, 0x68, 0xc5, 0x41, 0xcc, 0xdd, 0x30, 0x31, 0xbb, 0x32, 0xaf, 0x4d, 0xb1,
	0x9d, 0x24, 0x42, 0xe0, 0x7b, 0xdc, 0x13, 0x82, 0xbd, 0x42, 0x20, 0xb6, 0x93, 0x84, 0x3c, 0x86,
	0x8e, 0xae, 0x97, 0xd9, 0xeb, 0x1b, 0x83, 0xee, 0xd8, 0x1a, 0x16, 0x15, 0x1d, 0xce, 0x2b, 0x3a,
	0x3c, 0x9f, 0x6b, 0x38, 0xa5, 0x32, 0x39, 0x02, 0xc8, 0xb8, 0x97, 0x72, 0x57, 0x1c, 0x99, 0xfb,
	0xf5, 0xa6, 0x52, 0x5b, 0xec, 0x89, 0x05, 0xed, 0xd7, 0x2c, 0xe3, 0xd4, 0x8b, 0xd1, 0xbc, 0x21,
	0xc3, 0xd1, 0x7b, 0xeb, 0x15, 0x40, 0x99, 0x0b, 0xd1, 0x13, 0x6f, 0xf0, 0xad, 0x6a, 0x12, 0xb1,
	0x24, 0x8f, 0x60, 0xf7, 0xd2, 0x8b, 0x72, 0x94, 0x7d, 0xd2, 0x1d, 0xf7, 0x37, 0xa5, 0xc5, 0xc1,
	0x8c, 0xe5, 0xe9, 0x14, 0x9d, 0x42, 0xfd, 0x9b, 0xed, 0xc7, 0x86, 0xfd, 0x00, 0x7a, 0xcf, 0xa3,
	0x1c, 0x29, 0x7f, 0xf6, 0x94, 0xd1, 0x59, 0x18, 0xc8, 0x16, 0x4c, 0x74, 0x0b, 0x26, 0x84, 0x40,
	0x23, 0x61, 0x29, 0x97, 0xbe, 0x3b, 0x8e, 0x5c, 0xdb, 0xa7, 0xb0, 0x77, 0x9e, 0x53, 0x8a, 0x91,
	0xb2, 0x59, 0x0d, 0x89, 0x40, 0x63, 0x8a, 0xa5, 0x95, 0x58, 0x8b, 0x2b, 0x22, 0xf5, 0x13, 0x16,
	0x52, 0x2e, 0x3b, 0xb7, 0xe3, 0xe8, 0xbd, 0xfd, 0xef, 0x36, 0xb4, 0x9e, 0x46, 0x79, 0xc6, 0x31,
	0xad, 0x34, 0x9d, 0x71, 0xb5, 0xa6, 0x2b, 0x5e, 0xcd, 0xb6, 0x7e, 0x35, 0x07, 0xd0, 0xa2, 0xcc,
	0x47, 0x37, 0xf4, 0x15, 0x4e, 0x53, 0x6c, 0x27, 0xbe, 0xe8, 0x1f, 0xb1, 0xca, 0xcc, 0xc6, 0x86,
	0xfe, 0xa9, 0xb4, 0x9f, 0x53, 0xa8, 0x92, 0xbb, 0xd0, 0x8d, 0x58, 0x10, 0x84, 0x34, 0x70, 0xf3,
	0x34, 0x92, 0x6f, 0xa7, 0xe3, 0x80, 0x3a, 0x7a, 0x99, 0x46, 0xe4, 0x1e, 0xec, 0xc7, 0x1e, 0xf5,
	0x02, 0x8c, 0x91, 0x72, 0xa9, 0xd3, 0x94, 0x3a, 0xbd, 0xf2, 0x54, 0xa8, 0xfd, 0x04, 0x37, 0x66,
	0x32, 0xd1, 0xae, 0xef, 0x4e, 0x65, 0xda, 0xe4, 0x9b, 0xea, 0x8e, 0xef, 0x6d, 0x8a, 0x62, 0xa1,
	0x2e, 0x4e, 0x6f, 0xb6, 0x50, 0xa6, 0x09, 0xf4, 0xb8, 0x2c, 0xc1, 0xdc, 0x59, 0x5b, 0x3a, 0xfb,
	0x7c, 0x93, 0xb3, 0x6a, 0xbd, 0x9c, 0x3d, 0x5e, 0xd9, 0xd9, 0xb7, 0xe0, 0x40, 0xa5, 0xfe, 0x98,
	0xe6, 0x31, 0xa6, 0x1e, 0x47, 0x07, 0x7f, 0xcf, 0x31, 0xe3, 0xf6, 0x4b, 0x30, 0x57, 0x45, 0x59,
	0xc2, 0x68, 0x86, 0xe4, 0x08, 0x5a, 0xd3, 0x42, 0x26, 0xeb, 0xd4, 0x1d, 0xdf, 0xdd, 0x84, 0xad,
	0x5c, 0x38, 0x73, 0x7d, 0xfb, 0x10, 0x3e, 0x52, 0x67, 0x13, 0x9a, 0x25, 0x38, 0xe5, 0x0a, 0xaf,
	0x5a, 0x39, 0xa3, 0x5a, 0x39, 0xfb, 0x47, 0xb8, 0xb9, 0x6c, 0xa1, 0xc2, 0x38, 0x84, 0x86, 0xd0,
	0x51, 0x31, 0xbc, 0xbf, 0xa4, 0x52, 0xd3, 0xfe, 0x52, 0xa3, 0x9f, 0x21, 0x3f, 0x0b, 0xdf, 0xcd,
	0x6f, 0x2b, 0x9a, 0x36, 0x0b, 0xdf, 0x15, 0xae, 0x76, 0x1d, 0xb9, 0xb6, 0x4d, 0x0d, 0xac, 0x95,
	0x0b, 0x60, 0x3b, 0x86, 0x0f, 0xe7, 0x17, 0xc3, 0x98, 0x5d, 0x6a, 0x2f, 0xba, 0xc9, 0x8c, 0xab,
	0x37, 0xd9, 0xa7, 0xb0, 0x37, 0x63, 0xe9, 0x14, 0xdd, 0x54, 0xba, 0x92, 0xbd, 0xdc, 0x76, 0xba,
	0xf2, 0xac, 0xf0, 0x6e, 0x1f, 0xe8, 0xa8, 0xe7, 0x70, 0x2a, 0x0e, 0x4b, 0xd7, 0x48, 0x78, 0x54,
	0x4f, 0x43, 0xd5, 0xef, 0x05, 0xdc, 0x5a, 0x23, 0x53, 0x99, 0xbb, 0xee, 0x3b, 0xb3, 0x9f, 0x68,
	0xa4, 0x53, 0xc4, 0x74, 0x01, 0x89, 0x7c, 0x06, 0xbd, 0x28, 0xcc, 0x38, 0x52, 0x4c, 0x5d, 0x49,
	0x62, 0x45, 0xfd, 0xf6, 0xe6, 0x87, 0x27, 0x5e, 0x8c, 0xf6, 0xdf, 0x86, 0x8e, 0xa7, 0xea, 0x41,
	0xc5, 0xf3, 0x2b, 0xb4, 0x0b, 0x20, 0x9d, 0xbb, 0x27, 0x35, 0x1d, 0xb5, 0xea, 0x44, 0x85, 0x8c,
	0x6a, 0x6e, 0x68, 0x87, 0xd6, 0x39, 0xf4, 0x16, 0x44, 0x6b, 0x38, 0xeb, 0x7e, 0x95, 0x46, 0xdf,
	0x93, 0x8e, 0x0a, 0x7b, 0x8e, 0xe0, 0x8e, 0x0a, 0xe5, 0x07, 0xe4, 0x27, 0xb2, 0x55, 0x9f, 0xa7,
	0x2c, 0x9e, 0x24, 0xf3, 0xb4, 0x2c, 0xb1, 0xa9, 0x7d, 0x08, 0x9f, 0x6c, 0x32, 0x50, 0x59, 0x58,
	0xfa, 0x04, 0xb0, 0xff, 0x32, 0x34, 0x86, 0x7e, 0x83, 0xdf, 0x45, 0x98, 0x72, 0x9d, 0xfa, 0x23,
	0x00, 0x31, 0x6f, 0x5c, 0x39, 0x4c, 0xd4, 0x3b, 0xa8, 0x1d, 0x58, 0x67, 0x42, 0x99, 0x3c, 0x84,
	0xb6, 0x34, 0x45, 0xea, 0xab, 0xe1, 0xf1, 0x3e, 0xc3, 0x96, 0xd0, 0x3d, 0xa6, 0x3e, 0x39, 0x82,
	0x76, 0xaa, 0x66, 0x89, 0x64, 0xd8, 0xfd, 0xf1, 0x9d, 0x95, 0x64, 0xcd, 0x87, 0xcd, 0xf9, 0xdb,
	0x04, 0x1d, 0xad, 0x6e, 0xff, 0xa2, 0x13, 0xb0, 0x72, 0x9b, 0xb2, 0x2d, 0x3d, 0x79, 0xa2, 0xae,
	0xb2, 0x5a, 0x07, 0x65, 0xa0, 0xd4, 0xec, 0x44, 0xb7, 0xe5, 0xd3, 0x08, 0xbd, 0x54, 0x4a, 0xcb,
	0xdc, 0x94, 0x91, 0x1a, 0xd7, 0x8a, 0x54, 0x7e, 0x16, 0x09, 0x57, 0xae, 0x9a, 0x2d, 0xe2, 0xb3,
	0x48, 0xec, 0x27, 0xbe, 0x7d, 0x5b, 0xb7, 0x71, 0x15, 0x51, 0xbd, 0xc7, 0x32, 0x9c, 0xe3, 0xd4,
	0xcb, 0xf0, 0x7f, 0x0d, 0xa7, 0x8a, 0x58, 0x84, 0x33, 0xfe, 0xb3, 0x03, 0xe4, 0xe7, 0x04, 0xa9,
	0xfa, 0x06, 0x98, 0x0f, 0xd9, 0x04, 0x3a, 0xba, 0x00, 0x64, 0x54, 0xf3, 0xce, 0x96, 0xe7, 0x82,
	0x75, 0x78, 0x75, 0x03, 0x95, 0x95, 0x2d, 0xf2, 0x1b, 0xb4, 0x14, 0x77, 0x93, 0xfb, 0x35, 0xe6,
	0x8b, 0x53, 0xc1, 0x1a, 0x5e, 0x55, 0xbd, 0x8a, 0xa5, 0xe8, 0xba, 0x16, 0x6b, 0x71, 0x06, 0xd4,
	0x62, 0x2d, 0x4f, 0x81, 0x2d, 0x12, 0x40, 0xb3, 0x60, 0x64, 0xf2, 0x55, 0xdd, 0x00, 0xac, 0xce,
	0x09, 0xeb, 0xfe, 0x15, 0xb5, 0x35, 0x50, 0x06, 0x50, 0xb2, 0x38, 0xa9, 0x2b, 0xc1, 0xca, 0x30,
	0xb0, 0xbe, 0xbe, 0x86, 0x45, 0x15, 0xb4, 0x64, 0xd9, 0x5a, 0xd0, 0x95, 0xb9, 0x50, 0x0b, 0xba,
	0x4a, 0xe1, 0xf6, 0x16, 0xf9, 0xc3, 0x80, 0x1b, 0x4b, 0xfc, 0x48, 0x1e, 0xd6, 0x38, 0x5a, 0x4f,
	0xc0, 0xd6, 0xa3, 0xeb, 0x9a, 0x2d, 0x04, 0xb1, 0xc4, 0x51, 0xb5, 0x41, 0xac, 0x67, 0xe8, 0xda,
	0x20, 0x36, 0x50, 0x61, 0x91, 0xfe, 0x92, 0x62, 0x6a, 0xd3, 0xbf, 0xc2, 0x7f, 0xb5, 0xe9, 0x5f,
	0xc3, 0x5f, 0x12, 0xb4, 0x24, 0x92, 0x5a, 0xd0, 0x15, 0x96, 0xab, 0x05, 0x5d, 0x65, 0x29, 0x7b,
	0xeb, 0xfb, 0x53, 0xb0, 0xa6, 0x2c, 0xde, 0x60, 0x79, 0x6a, 0xbc, 0x3a, 0x0c, 0x42, 0xfe, 0x3a,
	0xbf, 0x18, 0x4e, 0x59, 0x3c, 0x8a, 0xc2, 0x8b, 0x8a, 0xde, 0xa8, 0xba, 0x2e, 0xff, 0xaa, 0x5f,
	0x34, 0xe5, 0x08, 0x7b, 0xf0, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xd9, 0x25, 0x3a, 0xbf,
	0x0f, 0x00, 0x00,
}
