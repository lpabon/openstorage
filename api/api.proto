syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

package openstorage.api;

option go_package = "api";
option java_multiple_files = true;
option java_package = "com.openstorage.api";

enum Status {
  STATUS_NONE = 0;
  STATUS_INIT = 1;
  STATUS_OK = 2;
  STATUS_OFFLINE = 3;
  STATUS_ERROR = 4;
  STATUS_NOT_IN_QUORUM = 5;
  STATUS_DECOMMISSION = 6;
  STATUS_MAINTENANCE = 7;
  STATUS_STORAGE_DOWN = 8;
  STATUS_STORAGE_DEGRADED = 9;
  STATUS_NEEDS_REBOOT = 10;
  STATUS_STORAGE_REBALANCE = 11;
  STATUS_STORAGE_DRIVE_REPLACE = 12;
  STATUS_NOT_IN_QUORUM_NO_STORAGE = 13;
  // Add statuses before MAX and update the number for MAX
  STATUS_MAX = 14;
}

enum DriverType {
  DRIVER_TYPE_NONE = 0;
  DRIVER_TYPE_FILE = 1;
  DRIVER_TYPE_BLOCK = 2;
  DRIVER_TYPE_OBJECT = 3;
  DRIVER_TYPE_CLUSTERED = 4;
  DRIVER_TYPE_GRAPH = 5;
}

enum FSType {
  FS_TYPE_NONE = 0;
  FS_TYPE_BTRFS = 1;
  FS_TYPE_EXT4 = 2;
  FS_TYPE_FUSE = 3;
  FS_TYPE_NFS = 4;
  FS_TYPE_VFS = 5;
  FS_TYPE_XFS = 6;
  FS_TYPE_ZFS = 7;
}

enum GraphDriverChangeType {
  GRAPH_DRIVER_CHANGE_TYPE_NONE = 0;
  GRAPH_DRIVER_CHANGE_TYPE_MODIFIED = 1;
  GRAPH_DRIVER_CHANGE_TYPE_ADDED = 2;
  GRAPH_DRIVER_CHANGE_TYPE_DELETED = 3;
}

enum SeverityType {
  SEVERITY_TYPE_NONE = 0;
  SEVERITY_TYPE_ALARM = 1;
  SEVERITY_TYPE_WARNING = 2;
  SEVERITY_TYPE_NOTIFY = 3;
}

enum ResourceType {
  RESOURCE_TYPE_NONE = 0;
  RESOURCE_TYPE_VOLUME = 1;
  RESOURCE_TYPE_NODE = 2;
  RESOURCE_TYPE_CLUSTER = 3;
  RESOURCE_TYPE_DRIVE = 4;
}

enum AlertActionType {
  ALERT_ACTION_TYPE_NONE = 0;
  ALERT_ACTION_TYPE_DELETE = 1;
  ALERT_ACTION_TYPE_CREATE = 2;
  ALERT_ACTION_TYPE_UPDATE = 3;
}

enum VolumeActionParam {
  VOLUME_ACTION_PARAM_NONE = 0;
  // Maps to the boolean value false
  VOLUME_ACTION_PARAM_OFF = 1;
  // Maps to the boolean value true.
  VOLUME_ACTION_PARAM_ON = 2;
}

enum CosType {
  NONE = 0;
  LOW = 1;
  MEDIUM = 2;
  HIGH = 3;
}

enum IoProfile {
  IO_PROFILE_SEQUENTIAL = 0;
  IO_PROFILE_RANDOM= 1;
  IO_PROFILE_DB = 2;
  IO_PROFILE_DB_REMOTE = 3;
  IO_PROFILE_CMS = 4;
}

// VolumeState represents the state of a volume.
enum VolumeState {
  VOLUME_STATE_NONE = 0;
  // Volume is transitioning to new state
  VOLUME_STATE_PENDING = 1;
  // Volume is ready to be assigned to a container
  VOLUME_STATE_AVAILABLE = 2;
  // Volume is attached to container
  VOLUME_STATE_ATTACHED = 3;
  // Volume is detached but associated with a container
  VOLUME_STATE_DETACHED = 4;
  // Volume detach is in progress
  VOLUME_STATE_DETATCHING = 5;
  // Volume is in error state
  VOLUME_STATE_ERROR = 6;
  // Volume is deleted, it will remain in this state
  // while resources are asynchronously reclaimed
  VOLUME_STATE_DELETED = 7;
  // Volume is trying to be detached
  VOLUME_STATE_TRY_DETACHING = 8;
  // Volume is undergoing restore
  VOLUME_STATE_RESTORE = 9;
}

// VolumeStatus represents a health status for a volume.
enum VolumeStatus {
  VOLUME_STATUS_NONE = 0;
  // Volume is not present
  VOLUME_STATUS_NOT_PRESENT = 1;
  // Volume is healthy
  VOLUME_STATUS_UP = 2;
  // Volume is in fail mode
  VOLUME_STATUS_DOWN = 3;
  // Volume is up but with degraded performance
  // In a RAID group, this may indicate a problem with one or more drives
  VOLUME_STATUS_DEGRADED = 4;
}

enum StorageMedium {
  // Magnetic spinning disk.
  STORAGE_MEDIUM_MAGNETIC = 0;
  // SSD disk
  STORAGE_MEDIUM_SSD = 1;
  // NVME disk
  STORAGE_MEDIUM_NVME = 2;
}

enum ClusterNotify {
 // Node is down
 CLUSTER_NOTIFY_DOWN = 0;
}

enum AttachState {
    // Attached and available externally
    ATTACH_STATE_EXTERNAL = 0;
    // Attached but only available internally
    ATTACH_STATE_INTERNAL = 1;
    // Switching from External to Internal
    ATTACH_STATE_INTERNAL_SWITCH = 2;
}

enum OperationFlags {                                                           
	OP_FLAGS_UNKNOWN = 0;
	OP_FLAGS_NONE = 1;                                                          
	// Perform a force_detach during detach operation
	OP_FLAGS_DETACH_FORCE = 2;                                                  
}

// StorageResource groups properties of a storage device.
// swagger:model
message StorageResource {
  // Id is the LUN identifier.
  string id = 1;
  // Path device path for this storage resource.
  string path = 2;
  // Storage medium.
  StorageMedium medium = 3;
  // True if this device is online.
  bool online = 4;;
  // IOPS
  uint64 iops = 5;;
  // SeqWrite
  double seq_write = 6;
  // SeqRead
  double seq_read = 7;
  // RandRW
  double randRW  = 8;
  // Total size in bytes.
  uint64 size = 9;;
  // Physical Bytes used.
  uint64 used = 10;
  // True if this device is rotational.
  string rotation_speed = 11;
  // Timestamp of last time this device was scanned.
  google.protobuf.Timestamp last_scan = 12;
  // True if dedicated for metadata.
  bool metadata = 13;
}

// StoragePool groups different storage devices based on their CosType
message StoragePool {
  // ID pool ID
  int32 ID = 1;
  // Cos reflects the capabilities of this drive pool
  CosType Cos = 2;
  // Medium underlying storage type
  StorageMedium Medium = 3;
  // RaidLevel storage raid level
  string RaidLevel = 4;
  // TotalSize of the pool
  uint64 TotalSize = 7;
  // Used size of the pool
  uint64 Used = 8;
  // Labels is a list of user defined name-value pairs
  map<string, string> labels = 9;
}

// VolumeLocator is a structure that is attached to a volume
// and is used to carry opaque metadata.
// swagger:model
message VolumeLocator {
  // User friendly identifier
  string name = 1;
  // A set of name-value pairs that acts as search filters
  map<string, string> volume_labels = 2;
}

// Source is a structure that can be given to a volume
// to seed the volume with data.
// swagger:model
message Source {
  // A volume id, if specified will create a clone of the parent.
  string parent = 1;
  // Seed will seed the volume from the specified URI
  // Any additional config for the source comes from the labels in the spec
  string seed = 2;
}

// Group represents VolumeGroup / namespace
// All volumes in the same group share this object.
// swagger:model
message Group {
  // Id common identifier across volumes that have the same group.
  string id = 1;
}

// VolumeSpec has the properties needed to create a volume.
// swagger:model
message VolumeSpec {
  // Ephemeral storage
  bool ephemeral = 1;
  // Size specifies the thin provisioned volume size.
  uint64 size = 2;
  // Format specifies the filesystem for this volume.
  FSType format = 3;
  // BlockSize for the filesystem.
  int64 block_size = 4;
  // HaLevel specifies the number of copies of data.
  int64 ha_level = 5;
  // Cos specifies the relative class of service.
  CosType cos = 6;
  // IoProfile provides a hint about application using this volume.
  IoProfile io_profile = 7;
  // Dedupe specifies if the volume data is to be de-duplicated.
  bool dedupe = 8;
  // SnapshotInterval in minutes, set to 0 to disable snapshots
  uint32 snapshot_interval = 9;
  // VolumeLabels configuration labels
  map<string, string> volume_labels = 10;
  // Shared is true if this volume can be remotely accessed.
  bool shared = 11;
  // ReplicaSet is the desired set of nodes for the volume data.
  ReplicaSet replica_set = 12;
  // Aggregatiokn level Specifies the number of parts the volume can be aggregated from.
  uint32 aggregation_level = 13;
  // Encrypted is true if this volume will be cryptographically secured.
  bool encrypted = 14;
  // Passphrase for an encrypted volume
  string passphrase = 15;
  // SnapshotSchedule a well known string that specifies when snapshots should be taken. 
  string snapshot_schedule = 16;
  // Scale allows autocreation of volumes.
  uint32 scale = 17;
  // Sticky volumes cannot be deleted until the flag is removed.
  bool sticky = 18;
  // Group identifies a consistency group
  Group group = 21;
  // GroupEnforced is true if consistency group creation is enforced.
  bool group_enforced = 22;
  // Compressed is true if this volume is to be compressed.
  bool compressed = 23;
  // Cascaded is true if this volume can be populated on any node from an external source.
  bool cascaded = 24;
  // Journal is true if data for the volume goes into the journal.
  bool journal = 25;
  // Nfs is true if this volume can be accessed via nfs.
  bool nfs = 26;
}

// ReplicaSet set of machine IDs (nodes) to which part of this volume is erasure 
// coded - for clustered storage arrays
// swagger:model
message ReplicaSet {
  repeated string nodes = 1;
}

// RuntimeStateMap is a list of name value mapping of driver specific runtime 
// information.
// swagger:model
message RuntimeStateMap {
  map<string, string> runtime_state = 1;
}

// Volume represents an abstract storage volume.
// Volume represents an abstract storage volume.
// swagger:model
message Volume {
  // Self referential volume ID.
  string id = 1;
  // Source specified seed data for the volume.
  Source source = 2;
  // Group volumes in the same group have the same group id.
  Group group = 3;
  // Readonly is true if this volume is to be mounted with readonly access.
  bool readonly = 4;
  // User specified locator
  VolumeLocator locator = 5;
  // Volume creation time
  google.protobuf.Timestamp ctime = 6;
  // User specified VolumeSpec
  VolumeSpec spec = 7;
  // Usage is bytes consumed by vtheis volume.
  uint64 usage = 8;
  // LastScan is the time when an integrity check was run.
  google.protobuf.Timestamp last_scan = 9;
  // Format specifies the filesytem for this volume.
  FSType format = 10;
  // Status is the availability status of this volume.
  VolumeStatus status = 11;
  // State is the current runtime state of this volume.
  VolumeState state = 12;
  // AttachedOn is the node instance identifier for clustered systems.
  string attached_on = 13;
  // AttachedState shows whether the device is attached for internal or external use.
  AttachState attached_state = 14;
  // DevicePath is the device exported by block device implementations.
  string device_path = 15;
  // SecureDevicePath is the device path for an encrypted volume.
  string secure_device_path = 16;
  // AttachPath is the mounted path in the host namespace.
  repeated string attach_path = 17;
  // AttachInfo is a list of name value mappings that provides attach information.
  map<string, string> attach_info = 18;
  // ReplicatSets storage for this volumefor clustered storage arrays.
  repeated ReplicaSet replica_sets = 19;
  // RuntimeState is a lst of name value mapping of driver specific runtime 
  // information.
  repeated RuntimeStateMap runtime_state = 20;
  // Error is the Last recorded error.
  string error = 21;
}

// Stats is a structure that represents last collected stats for a volume
// swagger:model
message Stats {
  // Reads completed successfully
  uint64 reads = 1;
  // Time spent in reads in ms
  uint64 read_ms = 2;
  uint64 read_bytes = 3;
  // Writes completed successfully
  uint64 writes = 4;
  // Time spent in writes in ms
  uint64 write_ms = 5;
  uint64 write_bytes = 6;
  // IOs curently in progress
  uint64 io_progress = 7;
  // Time spent doing IOs ms
  uint64 io_ms = 8;
  // BytesUsed
  uint64 bytes_used = 9;
  // Interval in ms during which stats were collected
  uint64 interval_ms = 10;
}


// Alert is a structure that represents an alert object
// swagger:model
message Alert {
  // Id for Alert
  int64 id = 1;
  // Severity of the Alert
  SeverityType severity = 2;
  // AlertType user defined alert type
  int64 alert_type = 3;
  // Message describing the Alert
  string message = 4;
  //Timestamp when Alert occured
  google.protobuf.Timestamp timestamp = 5;	
  // ResourceId where Alert occured
  string resource_id = 6;
  // Resource where Alert occured
  ResourceType resource = 7;
  // Cleared Flag
  bool cleared = 8;
  // TTL in seconds for this Alert
  uint64 ttl = 9;
  // UniqueTag helps identify a unique alert for a given resouce
  string unique_tag = 10;
}

// Alerts is an array of Alert objects
// swagger:model
message Alerts {
  repeated Alert alert = 1;
}

// ObjectstoreInfo is a structure that has current objectstore info
// swagger:model
message ObjectstoreInfo {
    // UUID of objectstore                                                      
    string uuid = 1;                                                               
    // VolumeID of volume used by object store                                  
    string volume_id = 2;                                                      
    // Enable/Disable created objectstore                                       
    bool enabled = 3;                                                                
    // Status of objectstore running/failed                                     
    string status = 4;                                                              
    // Action being taken on this objectstore                                   
    int64 action = 5;                                                                 
    // AccessKey for login into objectstore                                     
    string access_key = 6;                                                            
    // SecretKey for login into objectstore                                     
    string secret_key = 7;                                                           
    // Endpoints for accessing objectstore                                      
    repeated string endpoints = 8;                                                         
    // CurrentEndpoint on which objectstore server is accessible                
    string current_endPoint = 9;                                                     
    // AccessPort is objectstore server port                                    
    int64 access_port = 10;                                                             
    // Region for this objectstore                                              
    string region = 11;
}

// VolumeCreateRequest is a structure that has the locator, source and spec
// to create a volume
// swagger:model
message VolumeCreateRequest {
  // User specified volume name and labels
  VolumeLocator locator = 1;
  // Source to create volume
  Source source = 2;
  // The storage spec for the volume
  VolumeSpec spec = 3;
}

// VolumeResponse is a structure that wraps an error.
// swagger:response volumeResponse
message VolumeResponse {
  // Error message
  //
  // in: body
  // Required: true
  string error = 1;
}

// VolumeCreateResponse
// swagger:response volumeCreateResponse
message VolumeCreateResponse {
  // ID of the newly created volume
  //
  // in: body
  // Required: true
  string id = 1;
  // Volume Response
  //
  // in: body
  // Required: true
  VolumeResponse volume_response = 2;
}

// VolumeStateAction specifies desired actions.
// swagger:model
message VolumeStateAction {
  // Attach or Detach volume
  VolumeActionParam attach = 1;
  // Mount or unmount volume
  VolumeActionParam mount = 2;
  // MountPath Path where the device is mounted
  string mount_path = 3;
  // DevicePath Path returned in attach
  string device_path = 4;
}

// VolumeSet specifies a request to update a volume.
// swagger:model
message VolumeSetRequest {
  // User specified volume name and labels
  VolumeLocator locator = 1;
  // The storage spec for the volume
  VolumeSpec spec = 2;
  // State modification on this volume.
  VolumeStateAction action = 3;
  // additional options
  // required for the Set operation.
  map<string, string> options = 4;
}

// VolumeSetResponse
// swagger:response volumeSetResponse
message VolumeSetResponse {
  // Volume
  //
  // in: body
  // Required: true
  Volume volume = 1;
  //VolumeResponse
  //
  // in: body
  // Required: true
  VolumeResponse volume_response = 2;
}

// SnapCreateRequest specifies a request to create a snapshot of given volume.
// swagger:parameters snapVolume
message SnapCreateRequest {
  // volume id
  string id = 1;
  VolumeLocator locator = 2;
  bool readonly = 3;
}

// SnapCreateRequest specifies a response that get's returned when creating a snapshot.
// swagger:response snapCreateResponse
message SnapCreateResponse {
  // VolumeCreateResponse
  //
  // in: body
  // Required: true
  VolumeCreateResponse volume_create_response = 1;
}

// VolumeInfo 
// swagger:model
message VolumeInfo {
  string volume_id = 1;
  string path = 2;
  VolumeSpec storage = 3;
}

// GraphDriverChanges represent a list of changes between the filesystem layers
// specified by the ID and Parent.  // Parent may be an empty string, in which
// case there is no parent.
// Where the Path is the filesystem path within the layered filesystem
// swagger:model
message GraphDriverChanges {
  string path = 1;
  GraphDriverChangeType kind = 2;
}

// ClusterResponse specifies a response that gets returned when requesting the cluster
// swagger:response clusterResponse
message ClusterResponse {
  // Error code
  // 
  // in: body
  string error = 1;
}

// Active Request
// swagger:model
message ActiveRequest {
  map<int64, string> ReqestKV = 1;
}

// Active Requests
// swagger:model
message ActiveRequests {
  int64 RequestCount = 1;
  repeated ActiveRequest ActiveRequest = 2;
}

// GroupSnapCreateRequest specifies a request to create a snapshot of given group.
// swagger:model
message GroupSnapCreateRequest {
  string id = 1;
  map<string, string> Labels = 2;
}

// GroupSnapCreateRequest specifies a response that get's returned when creating a group snapshot.
// swagger:response groupSnapCreateResponse
message GroupSnapCreateResponse {
  // Created snapshots
  //
  // in: body
  // Required: true
  map<string, SnapCreateResponse> snapshots = 1;
  // Error message
  //
  // in: body
  // Required: true
  string error = 2;
}

// StorageNode describes the state of the node
message StorageNode {
  // Id of the node
  string id = 1;
  // Cpu usage of the node
  double cpu = 2;
  // Total memory of the node
  uint64 mem_total = 3;
  // Used memory of the node
  uint64 mem_used = 4;
  // Free memory of the node
  uint64 mem_free = 5;
  // Average load (percentage)
  int64 avg_load = 6;
  // Node status
  Status status = 7;
  // List of disks on the node
  map<string, StorageResource> disks = 9;
  // List of storage pools this node supports
  repeated StoragePool pools = 10;
  // Management IP
  string mgmt_ip = 11;
  // Data IP
  string data_ip = 12;
  // Hostname of the node
  string hostname = 15;
  // User defined labels for the node
  map<string, string> node_labels = 16;
}

// StorageCluster represents the state of the cluster
message StorageCluster {
  // Status of the cluster
  Status status = 1;
  // Id of the cluster
  string id = 2;
  // NodeId is the id of the node servicing these requests
  string node_id = 3;
  // Nodes are a list of all the nodes on the cluster
  repeated StorageNode nodes = 4;
}

service OpenStorageCluster {
  // Enumerate lists all the nodes in the cluster.
  rpc Enumerate(SdkClusterEnumerateRequest)
    returns (SdkClusterEnumerateResponse) {
      option(google.api.http) = {
        post: "/v1/cluster/enumerate"
        body: "*"
      };
    }

  // Inspect the node given a UUID.
  rpc Inspect(SdkClusterInspectRequest)
    returns (SdkClusterInspectResponse) {
      option(google.api.http) = {
        post: "/v1/cluster/inspect"
        body: "*"
      };
    }

  // Get a list of alerts from the storage cluster
  rpc AlertEnumerate(SdkClusterAlertEnumerateRequest)
    returns (SdkClusterAlertEnumerateResponse) {
      option(google.api.http) = {
        post: "/v1/cluster/alert/enumerate"
        body: "*"
      };
    }

  // Clear the alert for a given resource
  rpc AlertClear(SdkClusterAlertClearRequest)
    returns (SdkClusterAlertClearResponse) {
      option(google.api.http) = {
        post: "/v1/cluster/alert/clear"
        body: "*"
      };
    }

  // Erases an alert for a given resource
  rpc AlertErase(SdkClusterAlertEraseRequest)
    returns (SdkClusterAlertEraseResponse) {
      option(google.api.http) = {
        post: "/v1/cluster/alert/erase"
        body: "*"
      };
    }
}

service OpenStorageVolume {
  // Creates a new volume
  rpc Create(SdkVolumeCreateRequest)
    returns (SdkVolumeCreateResponse) {
      option(google.api.http) = {
        post: "/v1/volume/create"
        body: "*"
      };
    }

  // CreateFromVolumeId creates a new volume cloned from an existing volume
  rpc CreateFromVolumeId(SdkVolumeCreateFromVolumeIdRequest)
    returns (SdkVolumeCreateFromVolumeIdResponse) {
      option(google.api.http) = {
        post: "/v1/volume/createfromid"
        body: "*"
      };
    }

  // Delete a volume
  rpc Delete(SdkVolumeDeleteRequest)
    returns (SdkVolumeDeleteResponse) {
      option(google.api.http) = {
        post: "/v1/volume/delete"
        body: "*"
      };
    }

  // Get information on a volume
  rpc Inspect(SdkVolumeInspectRequest)
    returns (SdkVolumeInspectResponse) {
      option(google.api.http) = {
        post: "/v1/volume/inspect"
        body: "*"
      };
    }

  // Get a list of volumes
  rpc Enumerate(SdkVolumeEnumerateRequest)
    returns (SdkVolumeEnumerateResponse) {
      option(google.api.http) = {
        post: "/v1/volume/enumerate"
        body: "*"
      };
    }

  // Create a snapshot of a volume. This creates an immutable (read-only),
  // point-in-time snapshot of a volume.
  rpc SnapshotCreate(SdkVolumeSnapshotCreateRequest)
    returns (SdkVolumeSnapshotCreateResponse) {
      option(google.api.http) = {
        post: "/v1/volume/snapshot/create"
        body: "*"
      };
    }

  // Restores a volume to a specified snapshot
  rpc SnapshotRestore(SdkVolumeSnapshotRestoreRequest)
    returns (SdkVolumeSnapshotRestoreResponse) {
      option(google.api.http) = {
        post: "/v1/volume/snapshot/restore"
        body: "*"
      };
    }

  // List the number of snapshots for a specific volume
  rpc SnapshotEnumerate(SdkVolumeSnapshotEnumerateRequest)
    returns (SdkVolumeSnapshotEnumerateResponse) {
      option(google.api.http) = {
        post: "/v1/volume/snapshot/enumerate"
        body: "*"
      };
    }

  // Attach device to host                                                      
  rpc Attach(SdkVolumeAttachRequest)                                               
    returns (SdkVolumeAttachResponse) {                                            
      option(google.api.http) = {                                               
        post: "/v1/volume/attach"                                               
        body: "*"                                                               
      };                                                                        
    }  

  // Detaches the volume from the node.
  rpc Detach(SdkVolumeDetachRequest)
    returns (SdkVolumeDetachResponse) {
      option(google.api.http) = {
        post: "/v1/volume/detach"
        body: "*"
      };
    }

  // Attaches the volume to a node.
  rpc Mount(SdkVolumeMountRequest)
    returns(SdkVolumeMountResponse) {
      option(google.api.http) = {
        post: "/v1/volume/mount"
        body: "*"
      };
    }

  // Unmount volume at specified path                                           
  rpc Unmount(SdkVolumeUnmountRequest)                                             
      returns(SdkVolumeUnmountResponse) {                                         
      option(google.api.http) = {                                               
        post: "/v1/volume/unmount"                                              
        body: "*"                                                               
      };                                                                        
    }
}

service OpenStorageCredentials {

  // Provide credentials to OpenStorage and if valid,
  // it will return an identifier to the credentials

  // Create credential for AWS S3 and if valid ,
  // returns a unique identifier
  rpc CreateForAWS(SdkCredentialCreateAWSRequest)
    returns (SdkCredentialCreateAWSResponse) {
      option(google.api.http) = {
        post: "/v1/credentials/create/aws"
        body: "*"
      };
    }

  // Create credential for Azure and if valid ,
  // returns a unique identifier
  rpc CreateForAzure(SdkCredentialCreateAzureRequest)
    returns (SdkCredentialCreateAzureResponse) {
      option(google.api.http) = {
        post: "/v1/credentials/create/azure"
        body: "*"
      };
    }

  // Create credential for Google and if valid ,
  // returns a unique identifier
  rpc CreateForGoogle(SdkCredentialCreateGoogleRequest)
    returns (SdkCredentialCreateGoogleResponse) {
      option(google.api.http) = {
        post: "/v1/credentials/create/google"
        body: "*"
      };
    }

  // EnumerateForAWS lists the configured AWS credentials                      
  rpc EnumerateForAWS(SdkCredentialEnumerateAWSRequest)                       
    returns (SdkCredentialEnumerateAWSResponse) {                             
      option(google.api.http) = {                                                
        post: "/v1/credentials/enumerate/aws"                                    
        body: "*"                                                                
      };                                                                         
    }                                                                            
                                                                                
  // EnumerateForAzure lists the configured Azure credentials                  
  rpc EnumerateForAzure(SdkCredentialEnumerateAzureRequest)                   
    returns (SdkCredentialEnumerateAzureResponse) {                           
      option(google.api.http) = {                                                
        post: "/v1/credentials/enumerate/azure"                                  
        body: "*"                                                                
      };                                                                         
    }                                                                            

  // EnumerateForGoogle lists the configured Google credentials                
  rpc EnumerateForGoogle(SdkCredentialEnumerateGoogleRequest)                 
    returns (SdkCredentialEnumerateGoogleResponse) {                        
      option(google.api.http) = {                                              
        post: "/v1/credentials/enumerate/google"                               
        body: "*"                                                              
      };                                                                       
    }                                                                          
                                                                                
  // Delete a specified credential                                                 
  rpc CredentialDelete(SdkCredentialDeleteRequest)                                         
    returns (SdkCredentialDeleteResponse){                                             
      option(google.api.http) = {                                               
        post: "/v1/credentials/delete"                                       
        body: "*"                                                              
      };                                                                       
    }                                               

  // Validate a specified credential
  rpc CredentialValidate(SdkCredentialValidateRequest)
    returns (SdkCredentialValidateResponse) {
      option(google.api.http) = {
        post: "/v1/credentials/validate"
        body: "*"
      };
    }
}

message SdkCredentialCreateAzureRequest {
  // Azure Credential
  AzureCredential credential = 1;
}

message SdkCredentialCreateAzureResponse {
  // Id of the credentials
  string credential_id = 1;
}

message SdkCredentialCreateGoogleRequest {
  // Google Credential
  GoogleCredential credential = 1;
}

message SdkCredentialCreateGoogleResponse {
  // Id of the credentials
  string credential_id = 1;
}

message SdkCredentialCreateAWSRequest {
  // AWS S3 Credential
  S3Credential credential = 1;
}

message SdkCredentialCreateAWSResponse {
  // Id of the credentials
  string credential_id = 1;
}

message S3Credential{
  // Id of the credentials                                                     
  string credential_id = 1;                                                    
  // Access key                                                                
  string access_key = 2;                                                       
  // Secret key                                                                
  string secret_key = 3;                                                       
  // Endpoint                                                                  
  string endpoint = 4;                                                         
  // Region                                                                    
  string region = 5;                                                           
}

message AzureCredential {
	// Cred Type                                                                  
  string credential_id = 1;                                                         
  // Account name                                                               
  string account_name = 2;                                                      
  // Account key                                                                
  string account_key = 3; 
} 
                            
message GoogleCredential {
  string credential_id = 1;                                                     
  // Project ID                                                                 
  string project_id = 2;                                                        
  // JSON Key                                                                   
  string json_key = 3;                                                          
}

// should enumerate accept anything?                                            
message SdkCredentialEnumerateAWSRequest {                                     
  // Id of the credentials                                                     
  string credential_id = 1;                                                    
}                  

message SdkCredentialEnumerateAWSResponse {                                   
	// Array of Credentials for AWS
	repeated S3Credential credential = 1;
}                                                                               
                                                                                
message SdkCredentialEnumerateAzureRequest {                                   
  string credential_id = 1;                                                   
}                                                                               
                                                                                
message SdkCredentialEnumerateAzureResponse {                                  
	// List of Credentials for Azure
	repeated AzureCredential credential = 1;
}                                                                               
                                                                                
message SdkCredentialEnumerateGoogleRequest {                                  
  string credential_id = 1;                                                   
}                                                                               
                                                                                
message SdkCredentialEnumerateGoogleResponse {                               
	// List of Credentials for Google 
	repeated GoogleCredential credential = 1; 
}                            
message SdkCredentialDeleteRequest {                                                   
  // ID for credentials                                                       
  string credential_id = 1;                                                   
}  

message SdkCredentialDeleteResponse {                                                  
}                                                                               
      
message SdkCredentialValidateRequest {
  // Id of the credentials
  string credential_id = 1;
}

message SdkCredentialValidateResponse {
}

message SdkVolumeMountRequest {
  // Id of the volume
  string volume_id = 1;
  // Mount path for mounting the volume.
  string mount_path = 2;
  // Additional options
  map<string, string> options = 3;  
}

message SdkVolumeMountResponse {
}

message SdkVolumeUnmountRequest {                                                  
  // Id of volume                                                             
  string volume_id = 1;                                                       
  // MountPath for device                                                     
  string mount_path = 2;                                                      
  // Options to unmount device                                                
  map<string, string> options = 3;                                            
}
     
message SdkVolumeUnmountResponse {                                                 
}

message SdkVolumeAttachRequest {                                                   
  // Id of volume                                                             
  string volume_id = 1;                                                       
  // Options for attaching volume, right now only passphrase options is supported
  map<string, string>  options = 2;                                           
}                                                                               
                                                                                
message SdkVolumeAttachResponse {                                                  
  // Device path where device is exported                                     
  string device_path = 1;                                                     
}
          
message SdkVolumeDetachRequest {
  // Id of the volume
  string volume_id = 1;
}

message SdkVolumeDetachResponse {
}

message SdkVolumeCreateRequest {
  // Unique name of the volume. This will be used for idempotency.
  string name = 1;
  // Volume specification
  VolumeSpec spec = 2;
}

message SdkVolumeCreateResponse {
  // Id of new volume
  string volume_id = 1;
}

message SdkVolumeCreateFromVolumeIdRequest {
  // Unique name of the volume. This will be used for idempotency.
  string name = 1;
  // Parent volume id, if specified will create a new volume as a clone of the parent.
  string parent_id = 2;
  // Volume specification
  VolumeSpec spec = 3;
}

message SdkVolumeCreateFromVolumeIdResponse {
  // Id of new volume
  string volume_id = 1;
}

message SdkVolumeDeleteRequest {
  // Id of volume to delete
  string volume_id = 1;
}

message SdkVolumeDeleteResponse {
}

message SdkVolumeInspectRequest {
  // Id of volume to inspect
  string volume_id = 1;
}

message SdkVolumeInspectResponse {
  // Information about the volume
  Volume volume = 1;
}

message SdkVolumeEnumerateRequest {
  // Volumes to match to this locator.
  // If not provided, all volumes will be returned.
  VolumeLocator locator = 1;
}

message SdkVolumeEnumerateResponse {
  // List of volumes matching label
  repeated Volume volumes = 1;
}

message SdkVolumeSnapshotCreateRequest{
  // Id of volume to take the snapshot from
  string volume_id = 1;
  // Labels to apply to snapshot
  map<string, string> labels = 2;
}

message SdkVolumeSnapshotCreateResponse {
  // Id of immutable snapshot
  string snapshot_id = 1;
}

message SdkVolumeSnapshotRestoreRequest {
  // Id of volume
  string volume_id = 1;
  // Snapshot id to apply to `volume_id`
  string snapshot_id = 2;
}

message SdkVolumeSnapshotRestoreResponse {
}

message SdkVolumeSnapshotEnumerateRequest {
  // Id of volume
  string volume_id = 1;
  // Labels from snapshot
  map<string, string> labels = 2;
}

message SdkVolumeSnapshotEnumerateResponse {
  // List of immutable snapshots
  repeated Volume snapshots = 1;
}

message SdkClusterEnumerateRequest {
}

message SdkClusterEnumerateResponse {
  // Cluster information
	StorageCluster cluster = 1;
}

message SdkClusterInspectRequest {
  // Id of node to inspect (required)
	string node_id = 1;
}

message SdkClusterInspectResponse {
  // Node information
	StorageNode node = 1;
}

message SdkClusterAlertEnumerateRequest {
  // Start time of alerts (required)
  google.protobuf.Timestamp time_start = 1;
  // End time of alerts (required) 
  google.protobuf.Timestamp time_end = 2;
  // Type of resource (required)
	ResourceType resource = 3;
}

message SdkClusterAlertEnumerateResponse {
  // Information on the alerts requested 
	Alerts alerts = 1;
}

message SdkClusterAlertClearRequest {
  // Type of resource (required)
  ResourceType resource = 1;
  // Id of alert as returned by ClusterEnumerateAlertResponse (required) 
	int64 alert_id = 2;
}

message SdkClusterAlertClearResponse {
}

message SdkClusterAlertEraseRequest {
  // Type of resource (required)
  ResourceType resource = 1;
  // Id of alert as returned by ClusterEnumerateAlertResponse (required) 
	int64 alert_id = 2;
}

message SdkClusterAlertEraseResponse {
}
